// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: serviceprovider.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Nd_V1_BoolMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _status ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _status: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

struct Nd_V1_DeviceInfoMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceInfoID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _deviceInfoID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_deviceInfoID = newValue}
  }
  /// Returns true if `deviceInfoID` has been explicitly set.
  var hasDeviceInfoID: Bool {return self._deviceInfoID != nil}
  /// Clears the value of `deviceInfoID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceInfoID() {self._deviceInfoID = nil}

  var osversion: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _osversion ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_osversion = newValue}
  }
  /// Returns true if `osversion` has been explicitly set.
  var hasOsversion: Bool {return self._osversion != nil}
  /// Clears the value of `osversion`. Subsequent reads from it will return its default value.
  mutating func clearOsversion() {self._osversion = nil}

  var deviceName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _deviceName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_deviceName = newValue}
  }
  /// Returns true if `deviceName` has been explicitly set.
  var hasDeviceName: Bool {return self._deviceName != nil}
  /// Clears the value of `deviceName`. Subsequent reads from it will return its default value.
  mutating func clearDeviceName() {self._deviceName = nil}

  var model: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _model ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var product: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _product ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  var hasProduct: Bool {return self._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  mutating func clearProduct() {self._product = nil}

  var brand: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _brand ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  var hasBrand: Bool {return self._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  mutating func clearBrand() {self._brand = nil}

  var display: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _display ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_display = newValue}
  }
  /// Returns true if `display` has been explicitly set.
  var hasDisplay: Bool {return self._display != nil}
  /// Clears the value of `display`. Subsequent reads from it will return its default value.
  mutating func clearDisplay() {self._display = nil}

  var cpuAbi: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _cpuAbi ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_cpuAbi = newValue}
  }
  /// Returns true if `cpuAbi` has been explicitly set.
  var hasCpuAbi: Bool {return self._cpuAbi != nil}
  /// Clears the value of `cpuAbi`. Subsequent reads from it will return its default value.
  mutating func clearCpuAbi() {self._cpuAbi = nil}

  var cpuAbi2: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _cpuAbi2 ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_cpuAbi2 = newValue}
  }
  /// Returns true if `cpuAbi2` has been explicitly set.
  var hasCpuAbi2: Bool {return self._cpuAbi2 != nil}
  /// Clears the value of `cpuAbi2`. Subsequent reads from it will return its default value.
  mutating func clearCpuAbi2() {self._cpuAbi2 = nil}

  var manufacturer: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _manufacturer ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_manufacturer = newValue}
  }
  /// Returns true if `manufacturer` has been explicitly set.
  var hasManufacturer: Bool {return self._manufacturer != nil}
  /// Clears the value of `manufacturer`. Subsequent reads from it will return its default value.
  mutating func clearManufacturer() {self._manufacturer = nil}

  var serial: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serial ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serial = newValue}
  }
  /// Returns true if `serial` has been explicitly set.
  var hasSerial: Bool {return self._serial != nil}
  /// Clears the value of `serial`. Subsequent reads from it will return its default value.
  mutating func clearSerial() {self._serial = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceInfoID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _osversion: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _deviceName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _model: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _product: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _brand: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _display: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _cpuAbi: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _cpuAbi2: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _manufacturer: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serial: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_IdMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _id ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_NotificationRequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _title ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var body: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _body ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  var hasBody: Bool {return self._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  mutating func clearBody() {self._body = nil}

  var id: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _id ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var userID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _userID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var type: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _type ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _title: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _body: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _id: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _userID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _type: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_StringMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _message ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _message: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_TwilioAuthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _roomID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_roomID = newValue}
  }
  /// Returns true if `roomID` has been explicitly set.
  var hasRoomID: Bool {return self._roomID != nil}
  /// Clears the value of `roomID`. Subsequent reads from it will return its default value.
  mutating func clearRoomID() {self._roomID = nil}

  var userID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _userID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _roomID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _userID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_VoidMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var streetAddress: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _streetAddress ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_streetAddress = newValue}
  }
  /// Returns true if `streetAddress` has been explicitly set.
  var hasStreetAddress: Bool {return self._streetAddress != nil}
  /// Clears the value of `streetAddress`. Subsequent reads from it will return its default value.
  mutating func clearStreetAddress() {self._streetAddress = nil}

  var state: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _state ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var country: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _country ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  mutating func clearCountry() {self._country = nil}

  var pinCode: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _pinCode ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_pinCode = newValue}
  }
  /// Returns true if `pinCode` has been explicitly set.
  var hasPinCode: Bool {return self._pinCode != nil}
  /// Clears the value of `pinCode`. Subsequent reads from it will return its default value.
  mutating func clearPinCode() {self._pinCode = nil}

  var type: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _type ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var addressID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _addressID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_addressID = newValue}
  }
  /// Returns true if `addressID` has been explicitly set.
  var hasAddressID: Bool {return self._addressID != nil}
  /// Clears the value of `addressID`. Subsequent reads from it will return its default value.
  mutating func clearAddressID() {self._addressID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _streetAddress: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _state: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _country: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _pinCode: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _type: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _addressID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderAllergyMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allergyID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _allergyID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_allergyID = newValue}
  }
  /// Returns true if `allergyID` has been explicitly set.
  var hasAllergyID: Bool {return self._allergyID != nil}
  /// Clears the value of `allergyID`. Subsequent reads from it will return its default value.
  mutating func clearAllergyID() {self._allergyID = nil}

  var allergyName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _allergyName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_allergyName = newValue}
  }
  /// Returns true if `allergyName` has been explicitly set.
  var hasAllergyName: Bool {return self._allergyName != nil}
  /// Clears the value of `allergyName`. Subsequent reads from it will return its default value.
  mutating func clearAllergyName() {self._allergyName = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return self._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {self._appointmentID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return self._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {self._serviceRequestID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allergyID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _allergyName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderAppointmentMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return _storage._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {_uniqueStorage()._appointmentID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return _storage._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {_uniqueStorage()._serviceRequestID = nil}

  var parentAppointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._parentAppointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._parentAppointmentID = newValue}
  }
  /// Returns true if `parentAppointmentID` has been explicitly set.
  var hasParentAppointmentID: Bool {return _storage._parentAppointmentID != nil}
  /// Clears the value of `parentAppointmentID`. Subsequent reads from it will return its default value.
  mutating func clearParentAppointmentID() {_uniqueStorage()._parentAppointmentID = nil}

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return _storage._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {_uniqueStorage()._customerID = nil}

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return _storage._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {_uniqueStorage()._serviceProviderID = nil}

  var requestedBy: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._requestedBy ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._requestedBy = newValue}
  }
  /// Returns true if `requestedBy` has been explicitly set.
  var hasRequestedBy: Bool {return _storage._requestedBy != nil}
  /// Clears the value of `requestedBy`. Subsequent reads from it will return its default value.
  mutating func clearRequestedBy() {_uniqueStorage()._requestedBy = nil}

  var serviceProviderName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceProviderName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceProviderName = newValue}
  }
  /// Returns true if `serviceProviderName` has been explicitly set.
  var hasServiceProviderName: Bool {return _storage._serviceProviderName != nil}
  /// Clears the value of `serviceProviderName`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderName() {_uniqueStorage()._serviceProviderName = nil}

  var customerName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._customerName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._customerName = newValue}
  }
  /// Returns true if `customerName` has been explicitly set.
  var hasCustomerName: Bool {return _storage._customerName != nil}
  /// Clears the value of `customerName`. Subsequent reads from it will return its default value.
  mutating func clearCustomerName() {_uniqueStorage()._customerName = nil}

  var isBlockedByServiceProvider: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isBlockedByServiceProvider ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isBlockedByServiceProvider = newValue}
  }
  /// Returns true if `isBlockedByServiceProvider` has been explicitly set.
  var hasIsBlockedByServiceProvider: Bool {return _storage._isBlockedByServiceProvider != nil}
  /// Clears the value of `isBlockedByServiceProvider`. Subsequent reads from it will return its default value.
  mutating func clearIsBlockedByServiceProvider() {_uniqueStorage()._isBlockedByServiceProvider = nil}

  var status: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._status ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var serviceFee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _storage._serviceFee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._serviceFee = newValue}
  }
  /// Returns true if `serviceFee` has been explicitly set.
  var hasServiceFee: Bool {return _storage._serviceFee != nil}
  /// Clears the value of `serviceFee`. Subsequent reads from it will return its default value.
  mutating func clearServiceFee() {_uniqueStorage()._serviceFee = nil}

  var followUpDays: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._followUpDays ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._followUpDays = newValue}
  }
  /// Returns true if `followUpDays` has been explicitly set.
  var hasFollowUpDays: Bool {return _storage._followUpDays != nil}
  /// Clears the value of `followUpDays`. Subsequent reads from it will return its default value.
  mutating func clearFollowUpDays() {_uniqueStorage()._followUpDays = nil}

  var isPaid: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isPaid ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isPaid = newValue}
  }
  /// Returns true if `isPaid` has been explicitly set.
  var hasIsPaid: Bool {return _storage._isPaid != nil}
  /// Clears the value of `isPaid`. Subsequent reads from it will return its default value.
  mutating func clearIsPaid() {_uniqueStorage()._isPaid = nil}

  var scheduledAppointmentStartTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._scheduledAppointmentStartTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._scheduledAppointmentStartTime = newValue}
  }
  /// Returns true if `scheduledAppointmentStartTime` has been explicitly set.
  var hasScheduledAppointmentStartTime: Bool {return _storage._scheduledAppointmentStartTime != nil}
  /// Clears the value of `scheduledAppointmentStartTime`. Subsequent reads from it will return its default value.
  mutating func clearScheduledAppointmentStartTime() {_uniqueStorage()._scheduledAppointmentStartTime = nil}

  var scheduledAppointmentEndTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._scheduledAppointmentEndTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._scheduledAppointmentEndTime = newValue}
  }
  /// Returns true if `scheduledAppointmentEndTime` has been explicitly set.
  var hasScheduledAppointmentEndTime: Bool {return _storage._scheduledAppointmentEndTime != nil}
  /// Clears the value of `scheduledAppointmentEndTime`. Subsequent reads from it will return its default value.
  mutating func clearScheduledAppointmentEndTime() {_uniqueStorage()._scheduledAppointmentEndTime = nil}

  var actualAppointmentStartTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._actualAppointmentStartTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._actualAppointmentStartTime = newValue}
  }
  /// Returns true if `actualAppointmentStartTime` has been explicitly set.
  var hasActualAppointmentStartTime: Bool {return _storage._actualAppointmentStartTime != nil}
  /// Clears the value of `actualAppointmentStartTime`. Subsequent reads from it will return its default value.
  mutating func clearActualAppointmentStartTime() {_uniqueStorage()._actualAppointmentStartTime = nil}

  var actualAppointmentEndTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._actualAppointmentEndTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._actualAppointmentEndTime = newValue}
  }
  /// Returns true if `actualAppointmentEndTime` has been explicitly set.
  var hasActualAppointmentEndTime: Bool {return _storage._actualAppointmentEndTime != nil}
  /// Clears the value of `actualAppointmentEndTime`. Subsequent reads from it will return its default value.
  mutating func clearActualAppointmentEndTime() {_uniqueStorage()._actualAppointmentEndTime = nil}

  var createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._createdDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._createdDateTime = newValue}
  }
  /// Returns true if `createdDateTime` has been explicitly set.
  var hasCreatedDateTime: Bool {return _storage._createdDateTime != nil}
  /// Clears the value of `createdDateTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDateTime() {_uniqueStorage()._createdDateTime = nil}

  var lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._lastModifedDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._lastModifedDate = newValue}
  }
  /// Returns true if `lastModifedDate` has been explicitly set.
  var hasLastModifedDate: Bool {return _storage._lastModifedDate != nil}
  /// Clears the value of `lastModifedDate`. Subsequent reads from it will return its default value.
  mutating func clearLastModifedDate() {_uniqueStorage()._lastModifedDate = nil}

  var noOfReports: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._noOfReports ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._noOfReports = newValue}
  }
  /// Returns true if `noOfReports` has been explicitly set.
  var hasNoOfReports: Bool {return _storage._noOfReports != nil}
  /// Clears the value of `noOfReports`. Subsequent reads from it will return its default value.
  mutating func clearNoOfReports() {_uniqueStorage()._noOfReports = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Nd_V1_ServiceProviderAppointmentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appointments: [Nd_V1_ServiceProviderAppointmentMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderAppointmentRequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return self._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {self._serviceProviderID = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return self._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {self._appointmentID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderAppInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var authID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _authID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_authID = newValue}
  }
  /// Returns true if `authID` has been explicitly set.
  var hasAuthID: Bool {return self._authID != nil}
  /// Clears the value of `authID`. Subsequent reads from it will return its default value.
  mutating func clearAuthID() {self._authID = nil}

  var authType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _authType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_authType = newValue}
  }
  /// Returns true if `authType` has been explicitly set.
  var hasAuthType: Bool {return self._authType != nil}
  /// Clears the value of `authType`. Subsequent reads from it will return its default value.
  mutating func clearAuthType() {self._authType = nil}

  var deviceToken: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _deviceToken ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_deviceToken = newValue}
  }
  /// Returns true if `deviceToken` has been explicitly set.
  var hasDeviceToken: Bool {return self._deviceToken != nil}
  /// Clears the value of `deviceToken`. Subsequent reads from it will return its default value.
  mutating func clearDeviceToken() {self._deviceToken = nil}

  var appInfoID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appInfoID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appInfoID = newValue}
  }
  /// Returns true if `appInfoID` has been explicitly set.
  var hasAppInfoID: Bool {return self._appInfoID != nil}
  /// Clears the value of `appInfoID`. Subsequent reads from it will return its default value.
  mutating func clearAppInfoID() {self._appInfoID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _authID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _authType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _deviceToken: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appInfoID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderAvailability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dayOfWeek: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _dayOfWeek ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_dayOfWeek = newValue}
  }
  /// Returns true if `dayOfWeek` has been explicitly set.
  var hasDayOfWeek: Bool {return self._dayOfWeek != nil}
  /// Clears the value of `dayOfWeek`. Subsequent reads from it will return its default value.
  mutating func clearDayOfWeek() {self._dayOfWeek = nil}

  var startTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  var availabilityConfigID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _availabilityConfigID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_availabilityConfigID = newValue}
  }
  /// Returns true if `availabilityConfigID` has been explicitly set.
  var hasAvailabilityConfigID: Bool {return self._availabilityConfigID != nil}
  /// Clears the value of `availabilityConfigID`. Subsequent reads from it will return its default value.
  mutating func clearAvailabilityConfigID() {self._availabilityConfigID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dayOfWeek: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _availabilityConfigID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderAvailabilityConfigList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var availabilityList: [Nd_V1_ServiceProviderAvailability] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderAvailabilityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var availabilityList: [Nd_V1_ServiceProviderAvailability] = []

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return self._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {self._serviceProviderID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderCustomerProfileMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return _storage._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {_uniqueStorage()._customerID = nil}

  var firstName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._firstName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._firstName = newValue}
  }
  /// Returns true if `firstName` has been explicitly set.
  var hasFirstName: Bool {return _storage._firstName != nil}
  /// Clears the value of `firstName`. Subsequent reads from it will return its default value.
  mutating func clearFirstName() {_uniqueStorage()._firstName = nil}

  var lastName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._lastName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._lastName = newValue}
  }
  /// Returns true if `lastName` has been explicitly set.
  var hasLastName: Bool {return _storage._lastName != nil}
  /// Clears the value of `lastName`. Subsequent reads from it will return its default value.
  mutating func clearLastName() {_uniqueStorage()._lastName = nil}

  var gender: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._gender ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._gender = newValue}
  }
  /// Returns true if `gender` has been explicitly set.
  var hasGender: Bool {return _storage._gender != nil}
  /// Clears the value of `gender`. Subsequent reads from it will return its default value.
  mutating func clearGender() {_uniqueStorage()._gender = nil}

  var age: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._age ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._age = newValue}
  }
  /// Returns true if `age` has been explicitly set.
  var hasAge: Bool {return _storage._age != nil}
  /// Clears the value of `age`. Subsequent reads from it will return its default value.
  mutating func clearAge() {_uniqueStorage()._age = nil}

  var phoneNumbers: [Nd_V1_ServiceProviderPhoneNumber] {
    get {return _storage._phoneNumbers}
    set {_uniqueStorage()._phoneNumbers = newValue}
  }

  var addresses: [Nd_V1_ServiceProviderAddress] {
    get {return _storage._addresses}
    set {_uniqueStorage()._addresses = newValue}
  }

  var appInfo: Nd_V1_ServiceProviderAppInfo {
    get {return _storage._appInfo ?? Nd_V1_ServiceProviderAppInfo()}
    set {_uniqueStorage()._appInfo = newValue}
  }
  /// Returns true if `appInfo` has been explicitly set.
  var hasAppInfo: Bool {return _storage._appInfo != nil}
  /// Clears the value of `appInfo`. Subsequent reads from it will return its default value.
  mutating func clearAppInfo() {_uniqueStorage()._appInfo = nil}

  var languages: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._languages}
    set {_uniqueStorage()._languages = newValue}
  }

  var emailAddress: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._emailAddress ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._emailAddress = newValue}
  }
  /// Returns true if `emailAddress` has been explicitly set.
  var hasEmailAddress: Bool {return _storage._emailAddress != nil}
  /// Clears the value of `emailAddress`. Subsequent reads from it will return its default value.
  mutating func clearEmailAddress() {_uniqueStorage()._emailAddress = nil}

  var activeAppointmentIds: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._activeAppointmentIds}
    set {_uniqueStorage()._activeAppointmentIds = newValue}
  }

  var completedAppointmentIds: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._completedAppointmentIds}
    set {_uniqueStorage()._completedAppointmentIds = newValue}
  }

  var profilePicURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._profilePicURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._profilePicURL = newValue}
  }
  /// Returns true if `profilePicURL` has been explicitly set.
  var hasProfilePicURL: Bool {return _storage._profilePicURL != nil}
  /// Clears the value of `profilePicURL`. Subsequent reads from it will return its default value.
  mutating func clearProfilePicURL() {_uniqueStorage()._profilePicURL = nil}

  var primaryServiceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._primaryServiceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._primaryServiceProviderID = newValue}
  }
  /// Returns true if `primaryServiceProviderID` has been explicitly set.
  var hasPrimaryServiceProviderID: Bool {return _storage._primaryServiceProviderID != nil}
  /// Clears the value of `primaryServiceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearPrimaryServiceProviderID() {_uniqueStorage()._primaryServiceProviderID = nil}

  var lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._lastModifedDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._lastModifedDate = newValue}
  }
  /// Returns true if `lastModifedDate` has been explicitly set.
  var hasLastModifedDate: Bool {return _storage._lastModifedDate != nil}
  /// Clears the value of `lastModifedDate`. Subsequent reads from it will return its default value.
  mutating func clearLastModifedDate() {_uniqueStorage()._lastModifedDate = nil}

  var createdDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._createdDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return _storage._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

  var customerDeviceInfo: Nd_V1_DeviceInfoMessage {
    get {return _storage._customerDeviceInfo ?? Nd_V1_DeviceInfoMessage()}
    set {_uniqueStorage()._customerDeviceInfo = newValue}
  }
  /// Returns true if `customerDeviceInfo` has been explicitly set.
  var hasCustomerDeviceInfo: Bool {return _storage._customerDeviceInfo != nil}
  /// Clears the value of `customerDeviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearCustomerDeviceInfo() {_uniqueStorage()._customerDeviceInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Nd_V1_ServiceProviderCustomerProfileListMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var customers: [Nd_V1_ServiceProviderCustomerProfileMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderDiagnosisMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var type: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _type ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _type: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderEducation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var course: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _course ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_course = newValue}
  }
  /// Returns true if `course` has been explicitly set.
  var hasCourse: Bool {return self._course != nil}
  /// Clears the value of `course`. Subsequent reads from it will return its default value.
  mutating func clearCourse() {self._course = nil}

  var year: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _year ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_year = newValue}
  }
  /// Returns true if `year` has been explicitly set.
  var hasYear: Bool {return self._year != nil}
  /// Clears the value of `year`. Subsequent reads from it will return its default value.
  mutating func clearYear() {self._year = nil}

  var country: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _country ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  mutating func clearCountry() {self._country = nil}

  var college: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _college ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_college = newValue}
  }
  /// Returns true if `college` has been explicitly set.
  var hasCollege: Bool {return self._college != nil}
  /// Clears the value of `college`. Subsequent reads from it will return its default value.
  mutating func clearCollege() {self._college = nil}

  var university: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _university ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_university = newValue}
  }
  /// Returns true if `university` has been explicitly set.
  var hasUniversity: Bool {return self._university != nil}
  /// Clears the value of `university`. Subsequent reads from it will return its default value.
  mutating func clearUniversity() {self._university = nil}

  var educationID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _educationID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_educationID = newValue}
  }
  /// Returns true if `educationID` has been explicitly set.
  var hasEducationID: Bool {return self._educationID != nil}
  /// Clears the value of `educationID`. Subsequent reads from it will return its default value.
  mutating func clearEducationID() {self._educationID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _course: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _year: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _country: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _college: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _university: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _educationID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderWorkExperience {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organization: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _organization ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_organization = newValue}
  }
  /// Returns true if `organization` has been explicitly set.
  var hasOrganization: Bool {return self._organization != nil}
  /// Clears the value of `organization`. Subsequent reads from it will return its default value.
  mutating func clearOrganization() {self._organization = nil}

  var startDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _startDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  var hasStartDate: Bool {return self._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  mutating func clearStartDate() {self._startDate = nil}

  var endDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _endDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  var hasEndDate: Bool {return self._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  mutating func clearEndDate() {self._endDate = nil}

  var workExperienceID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _workExperienceID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_workExperienceID = newValue}
  }
  /// Returns true if `workExperienceID` has been explicitly set.
  var hasWorkExperienceID: Bool {return self._workExperienceID != nil}
  /// Clears the value of `workExperienceID`. Subsequent reads from it will return its default value.
  mutating func clearWorkExperienceID() {self._workExperienceID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _organization: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _startDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _endDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _workExperienceID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderFileInfoMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  mutating func clearFileName() {self._fileName = nil}

  var fileType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileType = newValue}
  }
  /// Returns true if `fileType` has been explicitly set.
  var hasFileType: Bool {return self._fileType != nil}
  /// Clears the value of `fileType`. Subsequent reads from it will return its default value.
  mutating func clearFileType() {self._fileType = nil}

  var mediaImage: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _mediaImage ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_mediaImage = newValue}
  }
  /// Returns true if `mediaImage` has been explicitly set.
  var hasMediaImage: Bool {return self._mediaImage != nil}
  /// Clears the value of `mediaImage`. Subsequent reads from it will return its default value.
  mutating func clearMediaImage() {self._mediaImage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fileName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _fileType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _mediaImage: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
}

struct Nd_V1_ServiceProviderFollowUpMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _createdDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_createdDateTime = newValue}
  }
  /// Returns true if `createdDateTime` has been explicitly set.
  var hasCreatedDateTime: Bool {return self._createdDateTime != nil}
  /// Clears the value of `createdDateTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDateTime() {self._createdDateTime = nil}

  var noOfDays: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _noOfDays ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_noOfDays = newValue}
  }
  /// Returns true if `noOfDays` has been explicitly set.
  var hasNoOfDays: Bool {return self._noOfDays != nil}
  /// Clears the value of `noOfDays`. Subsequent reads from it will return its default value.
  mutating func clearNoOfDays() {self._noOfDays = nil}

  var followUpFee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _followUpFee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_followUpFee = newValue}
  }
  /// Returns true if `followUpFee` has been explicitly set.
  var hasFollowUpFee: Bool {return self._followUpFee != nil}
  /// Clears the value of `followUpFee`. Subsequent reads from it will return its default value.
  mutating func clearFollowUpFee() {self._followUpFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _noOfDays: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _followUpFee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

struct Nd_V1_ServiceProviderFollowUpRequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return self._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {self._customerID = nil}

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return self._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {self._serviceProviderID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderGeneratedSlotMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _startDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_startDateTime = newValue}
  }
  /// Returns true if `startDateTime` has been explicitly set.
  var hasStartDateTime: Bool {return self._startDateTime != nil}
  /// Clears the value of `startDateTime`. Subsequent reads from it will return its default value.
  mutating func clearStartDateTime() {self._startDateTime = nil}

  var endStartDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _endStartDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_endStartDateTime = newValue}
  }
  /// Returns true if `endStartDateTime` has been explicitly set.
  var hasEndStartDateTime: Bool {return self._endStartDateTime != nil}
  /// Clears the value of `endStartDateTime`. Subsequent reads from it will return its default value.
  mutating func clearEndStartDateTime() {self._endStartDateTime = nil}

  var duration: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _endStartDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

struct Nd_V1_ServiceProviderGeneratedSlotListMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slots: [Nd_V1_ServiceProviderGeneratedSlotMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderMedicalHistoryMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalHistoryID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _medicalHistoryID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_medicalHistoryID = newValue}
  }
  /// Returns true if `medicalHistoryID` has been explicitly set.
  var hasMedicalHistoryID: Bool {return self._medicalHistoryID != nil}
  /// Clears the value of `medicalHistoryID`. Subsequent reads from it will return its default value.
  mutating func clearMedicalHistoryID() {self._medicalHistoryID = nil}

  var medicalHistoryName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _medicalHistoryName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_medicalHistoryName = newValue}
  }
  /// Returns true if `medicalHistoryName` has been explicitly set.
  var hasMedicalHistoryName: Bool {return self._medicalHistoryName != nil}
  /// Clears the value of `medicalHistoryName`. Subsequent reads from it will return its default value.
  mutating func clearMedicalHistoryName() {self._medicalHistoryName = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return self._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {self._appointmentID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return self._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {self._serviceRequestID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _medicalHistoryID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _medicalHistoryName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderMedicineMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicineName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _medicineName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_medicineName = newValue}
  }
  /// Returns true if `medicineName` has been explicitly set.
  var hasMedicineName: Bool {return self._medicineName != nil}
  /// Clears the value of `medicineName`. Subsequent reads from it will return its default value.
  mutating func clearMedicineName() {self._medicineName = nil}

  var dosage: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _dosage ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_dosage = newValue}
  }
  /// Returns true if `dosage` has been explicitly set.
  var hasDosage: Bool {return self._dosage != nil}
  /// Clears the value of `dosage`. Subsequent reads from it will return its default value.
  mutating func clearDosage() {self._dosage = nil}

  var routeOfAdministration: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _routeOfAdministration ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_routeOfAdministration = newValue}
  }
  /// Returns true if `routeOfAdministration` has been explicitly set.
  var hasRouteOfAdministration: Bool {return self._routeOfAdministration != nil}
  /// Clears the value of `routeOfAdministration`. Subsequent reads from it will return its default value.
  mutating func clearRouteOfAdministration() {self._routeOfAdministration = nil}

  var intake: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _intake ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_intake = newValue}
  }
  /// Returns true if `intake` has been explicitly set.
  var hasIntake: Bool {return self._intake != nil}
  /// Clears the value of `intake`. Subsequent reads from it will return its default value.
  mutating func clearIntake() {self._intake = nil}

  var duration: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var timings: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _timings ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_timings = newValue}
  }
  /// Returns true if `timings` has been explicitly set.
  var hasTimings: Bool {return self._timings != nil}
  /// Clears the value of `timings`. Subsequent reads from it will return its default value.
  mutating func clearTimings() {self._timings = nil}

  var specialInstructions: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _specialInstructions ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_specialInstructions = newValue}
  }
  /// Returns true if `specialInstructions` has been explicitly set.
  var hasSpecialInstructions: Bool {return self._specialInstructions != nil}
  /// Clears the value of `specialInstructions`. Subsequent reads from it will return its default value.
  mutating func clearSpecialInstructions() {self._specialInstructions = nil}

  var medicineID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _medicineID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_medicineID = newValue}
  }
  /// Returns true if `medicineID` has been explicitly set.
  var hasMedicineID: Bool {return self._medicineID != nil}
  /// Clears the value of `medicineID`. Subsequent reads from it will return its default value.
  mutating func clearMedicineID() {self._medicineID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _medicineName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _dosage: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _routeOfAdministration: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _intake: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _timings: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _specialInstructions: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _medicineID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderPaymentInfoMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return self._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {self._serviceProviderID = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return self._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {self._appointmentID = nil}

  var paidAmount: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _paidAmount ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_paidAmount = newValue}
  }
  /// Returns true if `paidAmount` has been explicitly set.
  var hasPaidAmount: Bool {return self._paidAmount != nil}
  /// Clears the value of `paidAmount`. Subsequent reads from it will return its default value.
  mutating func clearPaidAmount() {self._paidAmount = nil}

  var paidDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _paidDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_paidDate = newValue}
  }
  /// Returns true if `paidDate` has been explicitly set.
  var hasPaidDate: Bool {return self._paidDate != nil}
  /// Clears the value of `paidDate`. Subsequent reads from it will return its default value.
  mutating func clearPaidDate() {self._paidDate = nil}

  var paymentGateway: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _paymentGateway ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_paymentGateway = newValue}
  }
  /// Returns true if `paymentGateway` has been explicitly set.
  var hasPaymentGateway: Bool {return self._paymentGateway != nil}
  /// Clears the value of `paymentGateway`. Subsequent reads from it will return its default value.
  mutating func clearPaymentGateway() {self._paymentGateway = nil}

  var paymentTransactionID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _paymentTransactionID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_paymentTransactionID = newValue}
  }
  /// Returns true if `paymentTransactionID` has been explicitly set.
  var hasPaymentTransactionID: Bool {return self._paymentTransactionID != nil}
  /// Clears the value of `paymentTransactionID`. Subsequent reads from it will return its default value.
  mutating func clearPaymentTransactionID() {self._paymentTransactionID = nil}

  var paymentTransactionNotes: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _paymentTransactionNotes ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_paymentTransactionNotes = newValue}
  }
  /// Returns true if `paymentTransactionNotes` has been explicitly set.
  var hasPaymentTransactionNotes: Bool {return self._paymentTransactionNotes != nil}
  /// Clears the value of `paymentTransactionNotes`. Subsequent reads from it will return its default value.
  mutating func clearPaymentTransactionNotes() {self._paymentTransactionNotes = nil}

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return self._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {self._customerID = nil}

  var serviceProviderName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceProviderName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceProviderName = newValue}
  }
  /// Returns true if `serviceProviderName` has been explicitly set.
  var hasServiceProviderName: Bool {return self._serviceProviderName != nil}
  /// Clears the value of `serviceProviderName`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderName() {self._serviceProviderName = nil}

  var customerName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerName = newValue}
  }
  /// Returns true if `customerName` has been explicitly set.
  var hasCustomerName: Bool {return self._customerName != nil}
  /// Clears the value of `customerName`. Subsequent reads from it will return its default value.
  mutating func clearCustomerName() {self._customerName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _paidAmount: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _paidDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _paymentGateway: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _paymentTransactionID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _paymentTransactionNotes: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceProviderName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _customerName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderPaymentListMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payments: [Nd_V1_ServiceProviderPaymentInfoMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderPhoneNumber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var countryCode: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _countryCode ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_countryCode = newValue}
  }
  /// Returns true if `countryCode` has been explicitly set.
  var hasCountryCode: Bool {return self._countryCode != nil}
  /// Clears the value of `countryCode`. Subsequent reads from it will return its default value.
  mutating func clearCountryCode() {self._countryCode = nil}

  var number: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _number ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var type: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _type ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var phoneNumberID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _phoneNumberID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_phoneNumberID = newValue}
  }
  /// Returns true if `phoneNumberID` has been explicitly set.
  var hasPhoneNumberID: Bool {return self._phoneNumberID != nil}
  /// Clears the value of `phoneNumberID`. Subsequent reads from it will return its default value.
  mutating func clearPhoneNumberID() {self._phoneNumberID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _countryCode: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _number: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _type: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _phoneNumberID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderPrescriptionMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prescriptionID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _prescriptionID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_prescriptionID = newValue}
  }
  /// Returns true if `prescriptionID` has been explicitly set.
  var hasPrescriptionID: Bool {return self._prescriptionID != nil}
  /// Clears the value of `prescriptionID`. Subsequent reads from it will return its default value.
  mutating func clearPrescriptionID() {self._prescriptionID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return self._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {self._serviceRequestID = nil}

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return self._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {self._customerID = nil}

  var createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _createdDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_createdDateTime = newValue}
  }
  /// Returns true if `createdDateTime` has been explicitly set.
  var hasCreatedDateTime: Bool {return self._createdDateTime != nil}
  /// Clears the value of `createdDateTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDateTime() {self._createdDateTime = nil}

  var medicineList: [Nd_V1_ServiceProviderMedicineMessage] = []

  var fileInfo: Nd_V1_ServiceProviderFileInfoMessage {
    get {return _fileInfo ?? Nd_V1_ServiceProviderFileInfoMessage()}
    set {_fileInfo = newValue}
  }
  /// Returns true if `fileInfo` has been explicitly set.
  var hasFileInfo: Bool {return self._fileInfo != nil}
  /// Clears the value of `fileInfo`. Subsequent reads from it will return its default value.
  mutating func clearFileInfo() {self._fileInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _prescriptionID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _fileInfo: Nd_V1_ServiceProviderFileInfoMessage? = nil
}

struct Nd_V1_ServiceProviderReportMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reportID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _reportID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_reportID = newValue}
  }
  /// Returns true if `reportID` has been explicitly set.
  var hasReportID: Bool {return self._reportID != nil}
  /// Clears the value of `reportID`. Subsequent reads from it will return its default value.
  mutating func clearReportID() {self._reportID = nil}

  var fileName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  mutating func clearFileName() {self._fileName = nil}

  var name: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var fileType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileType = newValue}
  }
  /// Returns true if `fileType` has been explicitly set.
  var hasFileType: Bool {return self._fileType != nil}
  /// Clears the value of `fileType`. Subsequent reads from it will return its default value.
  mutating func clearFileType() {self._fileType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reportID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _fileName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _fileType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Nd_V1_ServiceProviderReportListMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reports: [Nd_V1_ServiceProviderReportMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nd_V1_ServiceProviderReportUploadMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reportID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _reportID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_reportID = newValue}
  }
  /// Returns true if `reportID` has been explicitly set.
  var hasReportID: Bool {return self._reportID != nil}
  /// Clears the value of `reportID`. Subsequent reads from it will return its default value.
  mutating func clearReportID() {self._reportID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return self._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {self._serviceRequestID = nil}

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return self._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {self._customerID = nil}

  var fileName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  mutating func clearFileName() {self._fileName = nil}

  var name: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var fileType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fileType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fileType = newValue}
  }
  /// Returns true if `fileType` has been explicitly set.
  var hasFileType: Bool {return self._fileType != nil}
  /// Clears the value of `fileType`. Subsequent reads from it will return its default value.
  mutating func clearFileType() {self._fileType = nil}

  var mediaFile: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _mediaFile ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_mediaFile = newValue}
  }
  /// Returns true if `mediaFile` has been explicitly set.
  var hasMediaFile: Bool {return self._mediaFile != nil}
  /// Clears the value of `mediaFile`. Subsequent reads from it will return its default value.
  mutating func clearMediaFile() {self._mediaFile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reportID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _fileName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _fileType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _mediaFile: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
}

struct Nd_V1_ServiceProviderProfileMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return _storage._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {_uniqueStorage()._serviceProviderID = nil}

  var serviceProviderType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceProviderType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceProviderType = newValue}
  }
  /// Returns true if `serviceProviderType` has been explicitly set.
  var hasServiceProviderType: Bool {return _storage._serviceProviderType != nil}
  /// Clears the value of `serviceProviderType`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderType() {_uniqueStorage()._serviceProviderType = nil}

  var firstName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._firstName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._firstName = newValue}
  }
  /// Returns true if `firstName` has been explicitly set.
  var hasFirstName: Bool {return _storage._firstName != nil}
  /// Clears the value of `firstName`. Subsequent reads from it will return its default value.
  mutating func clearFirstName() {_uniqueStorage()._firstName = nil}

  var lastName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._lastName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._lastName = newValue}
  }
  /// Returns true if `lastName` has been explicitly set.
  var hasLastName: Bool {return _storage._lastName != nil}
  /// Clears the value of `lastName`. Subsequent reads from it will return its default value.
  mutating func clearLastName() {_uniqueStorage()._lastName = nil}

  var specialities: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._specialities}
    set {_uniqueStorage()._specialities = newValue}
  }

  var gender: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._gender ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._gender = newValue}
  }
  /// Returns true if `gender` has been explicitly set.
  var hasGender: Bool {return _storage._gender != nil}
  /// Clears the value of `gender`. Subsequent reads from it will return its default value.
  mutating func clearGender() {_uniqueStorage()._gender = nil}

  var phoneNumbers: [Nd_V1_ServiceProviderPhoneNumber] {
    get {return _storage._phoneNumbers}
    set {_uniqueStorage()._phoneNumbers = newValue}
  }

  var addresses: [Nd_V1_ServiceProviderAddress] {
    get {return _storage._addresses}
    set {_uniqueStorage()._addresses = newValue}
  }

  var applicationInfo: Nd_V1_ServiceProviderAppInfo {
    get {return _storage._applicationInfo ?? Nd_V1_ServiceProviderAppInfo()}
    set {_uniqueStorage()._applicationInfo = newValue}
  }
  /// Returns true if `applicationInfo` has been explicitly set.
  var hasApplicationInfo: Bool {return _storage._applicationInfo != nil}
  /// Clears the value of `applicationInfo`. Subsequent reads from it will return its default value.
  mutating func clearApplicationInfo() {_uniqueStorage()._applicationInfo = nil}

  var emailAddress: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._emailAddress ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._emailAddress = newValue}
  }
  /// Returns true if `emailAddress` has been explicitly set.
  var hasEmailAddress: Bool {return _storage._emailAddress != nil}
  /// Clears the value of `emailAddress`. Subsequent reads from it will return its default value.
  mutating func clearEmailAddress() {_uniqueStorage()._emailAddress = nil}

  var profilePictureURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._profilePictureURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._profilePictureURL = newValue}
  }
  /// Returns true if `profilePictureURL` has been explicitly set.
  var hasProfilePictureURL: Bool {return _storage._profilePictureURL != nil}
  /// Clears the value of `profilePictureURL`. Subsequent reads from it will return its default value.
  mutating func clearProfilePictureURL() {_uniqueStorage()._profilePictureURL = nil}

  var languages: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._languages}
    set {_uniqueStorage()._languages = newValue}
  }

  var educations: [Nd_V1_ServiceProviderEducation] {
    get {return _storage._educations}
    set {_uniqueStorage()._educations = newValue}
  }

  var experiences: [Nd_V1_ServiceProviderWorkExperience] {
    get {return _storage._experiences}
    set {_uniqueStorage()._experiences = newValue}
  }

  var serviceFee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _storage._serviceFee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._serviceFee = newValue}
  }
  /// Returns true if `serviceFee` has been explicitly set.
  var hasServiceFee: Bool {return _storage._serviceFee != nil}
  /// Clears the value of `serviceFee`. Subsequent reads from it will return its default value.
  mutating func clearServiceFee() {_uniqueStorage()._serviceFee = nil}

  var serviceFeeCurrency: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceFeeCurrency ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceFeeCurrency = newValue}
  }
  /// Returns true if `serviceFeeCurrency` has been explicitly set.
  var hasServiceFeeCurrency: Bool {return _storage._serviceFeeCurrency != nil}
  /// Clears the value of `serviceFeeCurrency`. Subsequent reads from it will return its default value.
  mutating func clearServiceFeeCurrency() {_uniqueStorage()._serviceFeeCurrency = nil}

  var followUpServiceFee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _storage._followUpServiceFee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._followUpServiceFee = newValue}
  }
  /// Returns true if `followUpServiceFee` has been explicitly set.
  var hasFollowUpServiceFee: Bool {return _storage._followUpServiceFee != nil}
  /// Clears the value of `followUpServiceFee`. Subsequent reads from it will return its default value.
  mutating func clearFollowUpServiceFee() {_uniqueStorage()._followUpServiceFee = nil}

  var appointmentDuration: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._appointmentDuration ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._appointmentDuration = newValue}
  }
  /// Returns true if `appointmentDuration` has been explicitly set.
  var hasAppointmentDuration: Bool {return _storage._appointmentDuration != nil}
  /// Clears the value of `appointmentDuration`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentDuration() {_uniqueStorage()._appointmentDuration = nil}

  var intervalBetweenAppointment: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._intervalBetweenAppointment ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._intervalBetweenAppointment = newValue}
  }
  /// Returns true if `intervalBetweenAppointment` has been explicitly set.
  var hasIntervalBetweenAppointment: Bool {return _storage._intervalBetweenAppointment != nil}
  /// Clears the value of `intervalBetweenAppointment`. Subsequent reads from it will return its default value.
  mutating func clearIntervalBetweenAppointment() {_uniqueStorage()._intervalBetweenAppointment = nil}

  var status: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._status ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var registrationNumber: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._registrationNumber ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._registrationNumber = newValue}
  }
  /// Returns true if `registrationNumber` has been explicitly set.
  var hasRegistrationNumber: Bool {return _storage._registrationNumber != nil}
  /// Clears the value of `registrationNumber`. Subsequent reads from it will return its default value.
  mutating func clearRegistrationNumber() {_uniqueStorage()._registrationNumber = nil}

  var isActive: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isActive ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isActive = newValue}
  }
  /// Returns true if `isActive` has been explicitly set.
  var hasIsActive: Bool {return _storage._isActive != nil}
  /// Clears the value of `isActive`. Subsequent reads from it will return its default value.
  mutating func clearIsActive() {_uniqueStorage()._isActive = nil}

  var createdDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._createdDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return _storage._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

  var lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._lastModifedDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._lastModifedDate = newValue}
  }
  /// Returns true if `lastModifedDate` has been explicitly set.
  var hasLastModifedDate: Bool {return _storage._lastModifedDate != nil}
  /// Clears the value of `lastModifedDate`. Subsequent reads from it will return its default value.
  mutating func clearLastModifedDate() {_uniqueStorage()._lastModifedDate = nil}

  var serviceProviderDeviceInfo: Nd_V1_DeviceInfoMessage {
    get {return _storage._serviceProviderDeviceInfo ?? Nd_V1_DeviceInfoMessage()}
    set {_uniqueStorage()._serviceProviderDeviceInfo = newValue}
  }
  /// Returns true if `serviceProviderDeviceInfo` has been explicitly set.
  var hasServiceProviderDeviceInfo: Bool {return _storage._serviceProviderDeviceInfo != nil}
  /// Clears the value of `serviceProviderDeviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderDeviceInfo() {_uniqueStorage()._serviceProviderDeviceInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Nd_V1_ServiceProviderServiceRequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return _storage._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {_uniqueStorage()._serviceRequestID = nil}

  var reason: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._reason ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {_uniqueStorage()._reason = nil}

  var serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._serviceProviderID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._serviceProviderID = newValue}
  }
  /// Returns true if `serviceProviderID` has been explicitly set.
  var hasServiceProviderID: Bool {return _storage._serviceProviderID != nil}
  /// Clears the value of `serviceProviderID`. Subsequent reads from it will return its default value.
  mutating func clearServiceProviderID() {_uniqueStorage()._serviceProviderID = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return _storage._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {_uniqueStorage()._appointmentID = nil}

  var examination: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._examination ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._examination = newValue}
  }
  /// Returns true if `examination` has been explicitly set.
  var hasExamination: Bool {return _storage._examination != nil}
  /// Clears the value of `examination`. Subsequent reads from it will return its default value.
  mutating func clearExamination() {_uniqueStorage()._examination = nil}

  var diagnosis: Nd_V1_ServiceProviderDiagnosisMessage {
    get {return _storage._diagnosis ?? Nd_V1_ServiceProviderDiagnosisMessage()}
    set {_uniqueStorage()._diagnosis = newValue}
  }
  /// Returns true if `diagnosis` has been explicitly set.
  var hasDiagnosis: Bool {return _storage._diagnosis != nil}
  /// Clears the value of `diagnosis`. Subsequent reads from it will return its default value.
  mutating func clearDiagnosis() {_uniqueStorage()._diagnosis = nil}

  var investigations: [SwiftProtobuf.Google_Protobuf_StringValue] {
    get {return _storage._investigations}
    set {_uniqueStorage()._investigations = newValue}
  }

  var advice: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._advice ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._advice = newValue}
  }
  /// Returns true if `advice` has been explicitly set.
  var hasAdvice: Bool {return _storage._advice != nil}
  /// Clears the value of `advice`. Subsequent reads from it will return its default value.
  mutating func clearAdvice() {_uniqueStorage()._advice = nil}

  var createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._createdDateTime ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._createdDateTime = newValue}
  }
  /// Returns true if `createdDateTime` has been explicitly set.
  var hasCreatedDateTime: Bool {return _storage._createdDateTime != nil}
  /// Clears the value of `createdDateTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDateTime() {_uniqueStorage()._createdDateTime = nil}

  var lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._lastModifedDate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._lastModifedDate = newValue}
  }
  /// Returns true if `lastModifedDate` has been explicitly set.
  var hasLastModifedDate: Bool {return _storage._lastModifedDate != nil}
  /// Clears the value of `lastModifedDate`. Subsequent reads from it will return its default value.
  mutating func clearLastModifedDate() {_uniqueStorage()._lastModifedDate = nil}

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return _storage._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {_uniqueStorage()._customerID = nil}

  var allergy: Nd_V1_ServiceProviderAllergyMessage {
    get {return _storage._allergy ?? Nd_V1_ServiceProviderAllergyMessage()}
    set {_uniqueStorage()._allergy = newValue}
  }
  /// Returns true if `allergy` has been explicitly set.
  var hasAllergy: Bool {return _storage._allergy != nil}
  /// Clears the value of `allergy`. Subsequent reads from it will return its default value.
  mutating func clearAllergy() {_uniqueStorage()._allergy = nil}

  var medicalHistory: Nd_V1_ServiceProviderMedicalHistoryMessage {
    get {return _storage._medicalHistory ?? Nd_V1_ServiceProviderMedicalHistoryMessage()}
    set {_uniqueStorage()._medicalHistory = newValue}
  }
  /// Returns true if `medicalHistory` has been explicitly set.
  var hasMedicalHistory: Bool {return _storage._medicalHistory != nil}
  /// Clears the value of `medicalHistory`. Subsequent reads from it will return its default value.
  mutating func clearMedicalHistory() {_uniqueStorage()._medicalHistory = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Nd_V1_ServiceProviderServiceRequestRequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var customerID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _customerID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_customerID = newValue}
  }
  /// Returns true if `customerID` has been explicitly set.
  var hasCustomerID: Bool {return self._customerID != nil}
  /// Clears the value of `customerID`. Subsequent reads from it will return its default value.
  mutating func clearCustomerID() {self._customerID = nil}

  var appointmentID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _appointmentID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_appointmentID = newValue}
  }
  /// Returns true if `appointmentID` has been explicitly set.
  var hasAppointmentID: Bool {return self._appointmentID != nil}
  /// Clears the value of `appointmentID`. Subsequent reads from it will return its default value.
  mutating func clearAppointmentID() {self._appointmentID = nil}

  var serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _serviceRequestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_serviceRequestID = newValue}
  }
  /// Returns true if `serviceRequestID` has been explicitly set.
  var hasServiceRequestID: Bool {return self._serviceRequestID != nil}
  /// Clears the value of `serviceRequestID`. Subsequent reads from it will return its default value.
  mutating func clearServiceRequestID() {self._serviceRequestID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "nd.v1"

extension Nd_V1_BoolMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BoolMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_BoolMessage, rhs: Nd_V1_BoolMessage) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_DeviceInfoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DeviceInfoId"),
    2: .same(proto: "OSVersion"),
    3: .same(proto: "DeviceName"),
    4: .same(proto: "Model"),
    5: .same(proto: "Product"),
    6: .same(proto: "Brand"),
    7: .same(proto: "Display"),
    8: .standard(proto: "CPU_ABI"),
    9: .standard(proto: "CPU_ABI2"),
    10: .same(proto: "Manufacturer"),
    11: .same(proto: "Serial"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._deviceInfoID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._osversion) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._deviceName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._model) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._brand) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._display) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._cpuAbi) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._cpuAbi2) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._manufacturer) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._serial) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._deviceInfoID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._osversion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._deviceName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._brand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._display {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._cpuAbi {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._cpuAbi2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._manufacturer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._serial {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_DeviceInfoMessage, rhs: Nd_V1_DeviceInfoMessage) -> Bool {
    if lhs._deviceInfoID != rhs._deviceInfoID {return false}
    if lhs._osversion != rhs._osversion {return false}
    if lhs._deviceName != rhs._deviceName {return false}
    if lhs._model != rhs._model {return false}
    if lhs._product != rhs._product {return false}
    if lhs._brand != rhs._brand {return false}
    if lhs._display != rhs._display {return false}
    if lhs._cpuAbi != rhs._cpuAbi {return false}
    if lhs._cpuAbi2 != rhs._cpuAbi2 {return false}
    if lhs._manufacturer != rhs._manufacturer {return false}
    if lhs._serial != rhs._serial {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_IdMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_IdMessage, rhs: Nd_V1_IdMessage) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_NotificationRequestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationRequestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Title"),
    2: .same(proto: "Body"),
    3: .same(proto: "Id"),
    4: .same(proto: "UserId"),
    5: .same(proto: "Type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._body) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._userID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._body {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._userID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_NotificationRequestMessage, rhs: Nd_V1_NotificationRequestMessage) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._body != rhs._body {return false}
    if lhs._id != rhs._id {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_StringMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StringMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_StringMessage, rhs: Nd_V1_StringMessage) -> Bool {
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_TwilioAuthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TwilioAuthRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RoomId"),
    2: .same(proto: "UserId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._roomID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roomID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._userID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_TwilioAuthRequest, rhs: Nd_V1_TwilioAuthRequest) -> Bool {
    if lhs._roomID != rhs._roomID {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_VoidMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoidMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_VoidMessage, rhs: Nd_V1_VoidMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StreetAddress"),
    2: .same(proto: "State"),
    3: .same(proto: "Country"),
    4: .same(proto: "PinCode"),
    5: .same(proto: "Type"),
    6: .same(proto: "AddressId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._streetAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._country) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pinCode) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._addressID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._streetAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._country {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._pinCode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._addressID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAddress, rhs: Nd_V1_ServiceProviderAddress) -> Bool {
    if lhs._streetAddress != rhs._streetAddress {return false}
    if lhs._state != rhs._state {return false}
    if lhs._country != rhs._country {return false}
    if lhs._pinCode != rhs._pinCode {return false}
    if lhs._type != rhs._type {return false}
    if lhs._addressID != rhs._addressID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAllergyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAllergyMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AllergyId"),
    2: .same(proto: "AllergyName"),
    3: .same(proto: "AppointmentId"),
    4: .same(proto: "ServiceRequestId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._allergyID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._allergyName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._appointmentID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._serviceRequestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._allergyID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._allergyName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._appointmentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._serviceRequestID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAllergyMessage, rhs: Nd_V1_ServiceProviderAllergyMessage) -> Bool {
    if lhs._allergyID != rhs._allergyID {return false}
    if lhs._allergyName != rhs._allergyName {return false}
    if lhs._appointmentID != rhs._appointmentID {return false}
    if lhs._serviceRequestID != rhs._serviceRequestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAppointmentMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAppointmentMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AppointmentId"),
    2: .same(proto: "ServiceRequestId"),
    3: .same(proto: "ParentAppointmentId"),
    4: .same(proto: "CustomerId"),
    5: .same(proto: "ServiceProviderId"),
    6: .same(proto: "RequestedBy"),
    7: .same(proto: "ServiceProviderName"),
    8: .same(proto: "CustomerName"),
    9: .same(proto: "IsBlockedByServiceProvider"),
    10: .same(proto: "Status"),
    11: .same(proto: "ServiceFee"),
    12: .same(proto: "FollowUpDays"),
    13: .same(proto: "IsPaid"),
    14: .same(proto: "ScheduledAppointmentStartTime"),
    15: .same(proto: "ScheduledAppointmentEndTime"),
    16: .same(proto: "ActualAppointmentStartTime"),
    17: .same(proto: "ActualAppointmentEndTime"),
    18: .same(proto: "CreatedDateTime"),
    19: .same(proto: "LastModifedDate"),
    20: .same(proto: "NoOfReports"),
  ]

  fileprivate class _StorageClass {
    var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _parentAppointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _requestedBy: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceProviderName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _customerName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _isBlockedByServiceProvider: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _status: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceFee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _followUpDays: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _isPaid: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _scheduledAppointmentStartTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _scheduledAppointmentEndTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _actualAppointmentStartTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _actualAppointmentEndTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _noOfReports: SwiftProtobuf.Google_Protobuf_Int32Value? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appointmentID = source._appointmentID
      _serviceRequestID = source._serviceRequestID
      _parentAppointmentID = source._parentAppointmentID
      _customerID = source._customerID
      _serviceProviderID = source._serviceProviderID
      _requestedBy = source._requestedBy
      _serviceProviderName = source._serviceProviderName
      _customerName = source._customerName
      _isBlockedByServiceProvider = source._isBlockedByServiceProvider
      _status = source._status
      _serviceFee = source._serviceFee
      _followUpDays = source._followUpDays
      _isPaid = source._isPaid
      _scheduledAppointmentStartTime = source._scheduledAppointmentStartTime
      _scheduledAppointmentEndTime = source._scheduledAppointmentEndTime
      _actualAppointmentStartTime = source._actualAppointmentStartTime
      _actualAppointmentEndTime = source._actualAppointmentEndTime
      _createdDateTime = source._createdDateTime
      _lastModifedDate = source._lastModifedDate
      _noOfReports = source._noOfReports
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._appointmentID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._serviceRequestID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._parentAppointmentID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._customerID) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderID) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._requestedBy) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderName) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._customerName) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._isBlockedByServiceProvider) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._serviceFee) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._followUpDays) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._isPaid) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._scheduledAppointmentStartTime) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._scheduledAppointmentEndTime) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._actualAppointmentStartTime) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._actualAppointmentEndTime) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._createdDateTime) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._lastModifedDate) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._noOfReports) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._appointmentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._serviceRequestID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._parentAppointmentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._customerID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._serviceProviderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._requestedBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._serviceProviderName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._customerName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._isBlockedByServiceProvider {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._serviceFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._followUpDays {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._isPaid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._scheduledAppointmentStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._scheduledAppointmentEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._actualAppointmentStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._actualAppointmentEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._createdDateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._lastModifedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._noOfReports {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAppointmentMessage, rhs: Nd_V1_ServiceProviderAppointmentMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._appointmentID != rhs_storage._appointmentID {return false}
        if _storage._serviceRequestID != rhs_storage._serviceRequestID {return false}
        if _storage._parentAppointmentID != rhs_storage._parentAppointmentID {return false}
        if _storage._customerID != rhs_storage._customerID {return false}
        if _storage._serviceProviderID != rhs_storage._serviceProviderID {return false}
        if _storage._requestedBy != rhs_storage._requestedBy {return false}
        if _storage._serviceProviderName != rhs_storage._serviceProviderName {return false}
        if _storage._customerName != rhs_storage._customerName {return false}
        if _storage._isBlockedByServiceProvider != rhs_storage._isBlockedByServiceProvider {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._serviceFee != rhs_storage._serviceFee {return false}
        if _storage._followUpDays != rhs_storage._followUpDays {return false}
        if _storage._isPaid != rhs_storage._isPaid {return false}
        if _storage._scheduledAppointmentStartTime != rhs_storage._scheduledAppointmentStartTime {return false}
        if _storage._scheduledAppointmentEndTime != rhs_storage._scheduledAppointmentEndTime {return false}
        if _storage._actualAppointmentStartTime != rhs_storage._actualAppointmentStartTime {return false}
        if _storage._actualAppointmentEndTime != rhs_storage._actualAppointmentEndTime {return false}
        if _storage._createdDateTime != rhs_storage._createdDateTime {return false}
        if _storage._lastModifedDate != rhs_storage._lastModifedDate {return false}
        if _storage._noOfReports != rhs_storage._noOfReports {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAppointmentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAppointmentList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Appointments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.appointments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appointments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appointments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAppointmentList, rhs: Nd_V1_ServiceProviderAppointmentList) -> Bool {
    if lhs.appointments != rhs.appointments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAppointmentRequestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAppointmentRequestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ServiceProviderId"),
    2: .same(proto: "AppointmentId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._serviceProviderID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appointmentID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._serviceProviderID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appointmentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAppointmentRequestMessage, rhs: Nd_V1_ServiceProviderAppointmentRequestMessage) -> Bool {
    if lhs._serviceProviderID != rhs._serviceProviderID {return false}
    if lhs._appointmentID != rhs._appointmentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAppInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAppInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AuthId"),
    2: .same(proto: "AuthType"),
    3: .same(proto: "DeviceToken"),
    4: .same(proto: "AppInfoId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._authID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._authType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._deviceToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._appInfoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._authID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._authType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._deviceToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._appInfoID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAppInfo, rhs: Nd_V1_ServiceProviderAppInfo) -> Bool {
    if lhs._authID != rhs._authID {return false}
    if lhs._authType != rhs._authType {return false}
    if lhs._deviceToken != rhs._deviceToken {return false}
    if lhs._appInfoID != rhs._appInfoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAvailability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAvailability"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DayOfWeek"),
    2: .same(proto: "StartTime"),
    3: .same(proto: "EndTime"),
    4: .same(proto: "AvailabilityConfigId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dayOfWeek) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._availabilityConfigID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dayOfWeek {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._availabilityConfigID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAvailability, rhs: Nd_V1_ServiceProviderAvailability) -> Bool {
    if lhs._dayOfWeek != rhs._dayOfWeek {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs._availabilityConfigID != rhs._availabilityConfigID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAvailabilityConfigList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAvailabilityConfigList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AvailabilityList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.availabilityList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.availabilityList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availabilityList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAvailabilityConfigList, rhs: Nd_V1_ServiceProviderAvailabilityConfigList) -> Bool {
    if lhs.availabilityList != rhs.availabilityList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderAvailabilityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderAvailabilityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AvailabilityList"),
    2: .same(proto: "ServiceProviderId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.availabilityList) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceProviderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.availabilityList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availabilityList, fieldNumber: 1)
    }
    if let v = self._serviceProviderID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderAvailabilityRequest, rhs: Nd_V1_ServiceProviderAvailabilityRequest) -> Bool {
    if lhs.availabilityList != rhs.availabilityList {return false}
    if lhs._serviceProviderID != rhs._serviceProviderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderCustomerProfileMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderCustomerProfileMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CustomerId"),
    2: .same(proto: "FirstName"),
    3: .same(proto: "LastName"),
    4: .same(proto: "Gender"),
    5: .same(proto: "Age"),
    6: .same(proto: "PhoneNumbers"),
    7: .same(proto: "Addresses"),
    8: .same(proto: "AppInfo"),
    9: .same(proto: "Languages"),
    10: .same(proto: "EmailAddress"),
    11: .same(proto: "ActiveAppointmentIds"),
    12: .same(proto: "CompletedAppointmentIds"),
    13: .same(proto: "ProfilePicURL"),
    14: .same(proto: "PrimaryServiceProviderId"),
    15: .same(proto: "LastModifedDate"),
    16: .same(proto: "CreatedDate"),
    17: .same(proto: "CustomerDeviceInfo"),
  ]

  fileprivate class _StorageClass {
    var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _firstName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _lastName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _gender: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _age: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _phoneNumbers: [Nd_V1_ServiceProviderPhoneNumber] = []
    var _addresses: [Nd_V1_ServiceProviderAddress] = []
    var _appInfo: Nd_V1_ServiceProviderAppInfo? = nil
    var _languages: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _emailAddress: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _activeAppointmentIds: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _completedAppointmentIds: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _profilePicURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _primaryServiceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _createdDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _customerDeviceInfo: Nd_V1_DeviceInfoMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _customerID = source._customerID
      _firstName = source._firstName
      _lastName = source._lastName
      _gender = source._gender
      _age = source._age
      _phoneNumbers = source._phoneNumbers
      _addresses = source._addresses
      _appInfo = source._appInfo
      _languages = source._languages
      _emailAddress = source._emailAddress
      _activeAppointmentIds = source._activeAppointmentIds
      _completedAppointmentIds = source._completedAppointmentIds
      _profilePicURL = source._profilePicURL
      _primaryServiceProviderID = source._primaryServiceProviderID
      _lastModifedDate = source._lastModifedDate
      _createdDate = source._createdDate
      _customerDeviceInfo = source._customerDeviceInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._customerID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._firstName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._lastName) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._gender) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._age) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._phoneNumbers) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._addresses) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._appInfo) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._languages) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._emailAddress) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._activeAppointmentIds) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._completedAppointmentIds) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._profilePicURL) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._primaryServiceProviderID) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._lastModifedDate) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._createdDate) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._customerDeviceInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._customerID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._firstName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._lastName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._gender {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._age {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._phoneNumbers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._phoneNumbers, fieldNumber: 6)
      }
      if !_storage._addresses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._addresses, fieldNumber: 7)
      }
      if let v = _storage._appInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._languages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._languages, fieldNumber: 9)
      }
      if let v = _storage._emailAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._activeAppointmentIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activeAppointmentIds, fieldNumber: 11)
      }
      if !_storage._completedAppointmentIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._completedAppointmentIds, fieldNumber: 12)
      }
      if let v = _storage._profilePicURL {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._primaryServiceProviderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._lastModifedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._customerDeviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderCustomerProfileMessage, rhs: Nd_V1_ServiceProviderCustomerProfileMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._customerID != rhs_storage._customerID {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._age != rhs_storage._age {return false}
        if _storage._phoneNumbers != rhs_storage._phoneNumbers {return false}
        if _storage._addresses != rhs_storage._addresses {return false}
        if _storage._appInfo != rhs_storage._appInfo {return false}
        if _storage._languages != rhs_storage._languages {return false}
        if _storage._emailAddress != rhs_storage._emailAddress {return false}
        if _storage._activeAppointmentIds != rhs_storage._activeAppointmentIds {return false}
        if _storage._completedAppointmentIds != rhs_storage._completedAppointmentIds {return false}
        if _storage._profilePicURL != rhs_storage._profilePicURL {return false}
        if _storage._primaryServiceProviderID != rhs_storage._primaryServiceProviderID {return false}
        if _storage._lastModifedDate != rhs_storage._lastModifedDate {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        if _storage._customerDeviceInfo != rhs_storage._customerDeviceInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderCustomerProfileListMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderCustomerProfileListMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Customers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.customers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.customers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderCustomerProfileListMessage, rhs: Nd_V1_ServiceProviderCustomerProfileListMessage) -> Bool {
    if lhs.customers != rhs.customers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderDiagnosisMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderDiagnosisMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Name"),
    2: .same(proto: "Type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderDiagnosisMessage, rhs: Nd_V1_ServiceProviderDiagnosisMessage) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderEducation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderEducation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Course"),
    2: .same(proto: "Year"),
    3: .same(proto: "Country"),
    4: .same(proto: "College"),
    5: .same(proto: "University"),
    6: .same(proto: "EducationId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._course) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._year) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._country) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._college) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._university) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._educationID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._course {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._year {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._country {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._college {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._university {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._educationID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderEducation, rhs: Nd_V1_ServiceProviderEducation) -> Bool {
    if lhs._course != rhs._course {return false}
    if lhs._year != rhs._year {return false}
    if lhs._country != rhs._country {return false}
    if lhs._college != rhs._college {return false}
    if lhs._university != rhs._university {return false}
    if lhs._educationID != rhs._educationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderWorkExperience: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderWorkExperience"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Organization"),
    2: .same(proto: "StartDate"),
    3: .same(proto: "EndDate"),
    4: .same(proto: "WorkExperienceId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._organization) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startDate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endDate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._workExperienceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._organization {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._workExperienceID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderWorkExperience, rhs: Nd_V1_ServiceProviderWorkExperience) -> Bool {
    if lhs._organization != rhs._organization {return false}
    if lhs._startDate != rhs._startDate {return false}
    if lhs._endDate != rhs._endDate {return false}
    if lhs._workExperienceID != rhs._workExperienceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderFileInfoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderFileInfoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FileName"),
    2: .same(proto: "FileType"),
    3: .same(proto: "MediaImage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fileName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fileType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._mediaImage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fileName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fileType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._mediaImage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderFileInfoMessage, rhs: Nd_V1_ServiceProviderFileInfoMessage) -> Bool {
    if lhs._fileName != rhs._fileName {return false}
    if lhs._fileType != rhs._fileType {return false}
    if lhs._mediaImage != rhs._mediaImage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderFollowUpMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderFollowUpMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CreatedDateTime"),
    2: .same(proto: "NoOfDays"),
    3: .same(proto: "FollowUpFee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createdDateTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._noOfDays) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._followUpFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._createdDateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._noOfDays {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._followUpFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderFollowUpMessage, rhs: Nd_V1_ServiceProviderFollowUpMessage) -> Bool {
    if lhs._createdDateTime != rhs._createdDateTime {return false}
    if lhs._noOfDays != rhs._noOfDays {return false}
    if lhs._followUpFee != rhs._followUpFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderFollowUpRequestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderFollowUpRequestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CustomerId"),
    2: .same(proto: "ServiceProviderId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._customerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceProviderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._customerID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serviceProviderID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderFollowUpRequestMessage, rhs: Nd_V1_ServiceProviderFollowUpRequestMessage) -> Bool {
    if lhs._customerID != rhs._customerID {return false}
    if lhs._serviceProviderID != rhs._serviceProviderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderGeneratedSlotMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderGeneratedSlotMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StartDateTime"),
    2: .same(proto: "EndStartDateTime"),
    3: .same(proto: "Duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startDateTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endStartDateTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startDateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._endStartDateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderGeneratedSlotMessage, rhs: Nd_V1_ServiceProviderGeneratedSlotMessage) -> Bool {
    if lhs._startDateTime != rhs._startDateTime {return false}
    if lhs._endStartDateTime != rhs._endStartDateTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderGeneratedSlotListMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderGeneratedSlotListMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Slots"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.slots) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slots, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderGeneratedSlotListMessage, rhs: Nd_V1_ServiceProviderGeneratedSlotListMessage) -> Bool {
    if lhs.slots != rhs.slots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderMedicalHistoryMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderMedicalHistoryMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MedicalHistoryId"),
    2: .same(proto: "MedicalHistoryName"),
    3: .same(proto: "AppointmentId"),
    4: .same(proto: "ServiceRequestId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._medicalHistoryID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._medicalHistoryName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._appointmentID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._serviceRequestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._medicalHistoryID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._medicalHistoryName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._appointmentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._serviceRequestID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderMedicalHistoryMessage, rhs: Nd_V1_ServiceProviderMedicalHistoryMessage) -> Bool {
    if lhs._medicalHistoryID != rhs._medicalHistoryID {return false}
    if lhs._medicalHistoryName != rhs._medicalHistoryName {return false}
    if lhs._appointmentID != rhs._appointmentID {return false}
    if lhs._serviceRequestID != rhs._serviceRequestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderMedicineMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderMedicineMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MedicineName"),
    2: .same(proto: "Dosage"),
    3: .same(proto: "RouteOfAdministration"),
    4: .same(proto: "Intake"),
    5: .same(proto: "Duration"),
    6: .same(proto: "Timings"),
    7: .same(proto: "SpecialInstructions"),
    8: .same(proto: "MedicineId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._medicineName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dosage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._routeOfAdministration) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._intake) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timings) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._specialInstructions) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._medicineID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._medicineName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dosage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._routeOfAdministration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._intake {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._timings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._specialInstructions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._medicineID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderMedicineMessage, rhs: Nd_V1_ServiceProviderMedicineMessage) -> Bool {
    if lhs._medicineName != rhs._medicineName {return false}
    if lhs._dosage != rhs._dosage {return false}
    if lhs._routeOfAdministration != rhs._routeOfAdministration {return false}
    if lhs._intake != rhs._intake {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._timings != rhs._timings {return false}
    if lhs._specialInstructions != rhs._specialInstructions {return false}
    if lhs._medicineID != rhs._medicineID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderPaymentInfoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderPaymentInfoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ServiceProviderId"),
    2: .same(proto: "AppointmentId"),
    3: .same(proto: "PaidAmount"),
    4: .same(proto: "PaidDate"),
    5: .same(proto: "PaymentGateway"),
    6: .same(proto: "PaymentTransactionId"),
    7: .same(proto: "PaymentTransactionNotes"),
    8: .same(proto: "CustomerId"),
    9: .same(proto: "ServiceProviderName"),
    10: .same(proto: "CustomerName"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._serviceProviderID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appointmentID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._paidAmount) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._paidDate) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._paymentGateway) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._paymentTransactionID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._paymentTransactionNotes) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._customerID) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._serviceProviderName) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._customerName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._serviceProviderID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appointmentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._paidAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._paidDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._paymentGateway {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._paymentTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._paymentTransactionNotes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._customerID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._serviceProviderName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._customerName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderPaymentInfoMessage, rhs: Nd_V1_ServiceProviderPaymentInfoMessage) -> Bool {
    if lhs._serviceProviderID != rhs._serviceProviderID {return false}
    if lhs._appointmentID != rhs._appointmentID {return false}
    if lhs._paidAmount != rhs._paidAmount {return false}
    if lhs._paidDate != rhs._paidDate {return false}
    if lhs._paymentGateway != rhs._paymentGateway {return false}
    if lhs._paymentTransactionID != rhs._paymentTransactionID {return false}
    if lhs._paymentTransactionNotes != rhs._paymentTransactionNotes {return false}
    if lhs._customerID != rhs._customerID {return false}
    if lhs._serviceProviderName != rhs._serviceProviderName {return false}
    if lhs._customerName != rhs._customerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderPaymentListMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderPaymentListMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Payments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.payments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.payments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderPaymentListMessage, rhs: Nd_V1_ServiceProviderPaymentListMessage) -> Bool {
    if lhs.payments != rhs.payments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderPhoneNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderPhoneNumber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CountryCode"),
    2: .same(proto: "Number"),
    3: .same(proto: "Type"),
    4: .same(proto: "PhoneNumberId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._countryCode) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._number) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._phoneNumberID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._countryCode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._number {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._phoneNumberID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderPhoneNumber, rhs: Nd_V1_ServiceProviderPhoneNumber) -> Bool {
    if lhs._countryCode != rhs._countryCode {return false}
    if lhs._number != rhs._number {return false}
    if lhs._type != rhs._type {return false}
    if lhs._phoneNumberID != rhs._phoneNumberID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderPrescriptionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderPrescriptionMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrescriptionId"),
    2: .same(proto: "ServiceRequestId"),
    3: .same(proto: "CustomerId"),
    4: .same(proto: "CreatedDateTime"),
    5: .same(proto: "MedicineList"),
    6: .same(proto: "FileInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._prescriptionID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceRequestID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._customerID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdDateTime) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.medicineList) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fileInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._prescriptionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serviceRequestID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._customerID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._createdDateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.medicineList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.medicineList, fieldNumber: 5)
    }
    if let v = self._fileInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderPrescriptionMessage, rhs: Nd_V1_ServiceProviderPrescriptionMessage) -> Bool {
    if lhs._prescriptionID != rhs._prescriptionID {return false}
    if lhs._serviceRequestID != rhs._serviceRequestID {return false}
    if lhs._customerID != rhs._customerID {return false}
    if lhs._createdDateTime != rhs._createdDateTime {return false}
    if lhs.medicineList != rhs.medicineList {return false}
    if lhs._fileInfo != rhs._fileInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderReportMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderReportMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ReportId"),
    2: .same(proto: "FileName"),
    3: .same(proto: "Name"),
    4: .same(proto: "FileType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reportID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fileName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fileType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reportID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fileName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._fileType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderReportMessage, rhs: Nd_V1_ServiceProviderReportMessage) -> Bool {
    if lhs._reportID != rhs._reportID {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs._name != rhs._name {return false}
    if lhs._fileType != rhs._fileType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderReportListMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderReportListMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Reports"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.reports) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reports, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderReportListMessage, rhs: Nd_V1_ServiceProviderReportListMessage) -> Bool {
    if lhs.reports != rhs.reports {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderReportUploadMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderReportUploadMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ReportId"),
    2: .same(proto: "ServiceRequestId"),
    3: .same(proto: "CustomerId"),
    4: .same(proto: "FileName"),
    5: .same(proto: "Name"),
    6: .same(proto: "FileType"),
    7: .same(proto: "MediaFile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reportID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._serviceRequestID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._customerID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fileName) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fileType) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._mediaFile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reportID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serviceRequestID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._customerID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._fileName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._fileType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._mediaFile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderReportUploadMessage, rhs: Nd_V1_ServiceProviderReportUploadMessage) -> Bool {
    if lhs._reportID != rhs._reportID {return false}
    if lhs._serviceRequestID != rhs._serviceRequestID {return false}
    if lhs._customerID != rhs._customerID {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs._name != rhs._name {return false}
    if lhs._fileType != rhs._fileType {return false}
    if lhs._mediaFile != rhs._mediaFile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderProfileMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderProfileMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ServiceProviderId"),
    2: .same(proto: "ServiceProviderType"),
    3: .same(proto: "FirstName"),
    4: .same(proto: "LastName"),
    5: .same(proto: "Specialities"),
    6: .same(proto: "Gender"),
    7: .same(proto: "PhoneNumbers"),
    8: .same(proto: "Addresses"),
    9: .same(proto: "ApplicationInfo"),
    10: .same(proto: "EmailAddress"),
    11: .same(proto: "ProfilePictureUrl"),
    12: .same(proto: "Languages"),
    13: .same(proto: "Educations"),
    14: .same(proto: "Experiences"),
    15: .same(proto: "ServiceFee"),
    16: .same(proto: "ServiceFeeCurrency"),
    17: .same(proto: "FollowUpServiceFee"),
    18: .same(proto: "AppointmentDuration"),
    19: .same(proto: "IntervalBetweenAppointment"),
    20: .same(proto: "Status"),
    21: .same(proto: "RegistrationNumber"),
    22: .same(proto: "IsActive"),
    23: .same(proto: "CreatedDate"),
    24: .same(proto: "LastModifedDate"),
    25: .same(proto: "ServiceProviderDeviceInfo"),
  ]

  fileprivate class _StorageClass {
    var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceProviderType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _firstName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _lastName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _specialities: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _gender: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _phoneNumbers: [Nd_V1_ServiceProviderPhoneNumber] = []
    var _addresses: [Nd_V1_ServiceProviderAddress] = []
    var _applicationInfo: Nd_V1_ServiceProviderAppInfo? = nil
    var _emailAddress: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _profilePictureURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _languages: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _educations: [Nd_V1_ServiceProviderEducation] = []
    var _experiences: [Nd_V1_ServiceProviderWorkExperience] = []
    var _serviceFee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _serviceFeeCurrency: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _followUpServiceFee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _appointmentDuration: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _intervalBetweenAppointment: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _status: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _registrationNumber: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _isActive: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _createdDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _serviceProviderDeviceInfo: Nd_V1_DeviceInfoMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serviceProviderID = source._serviceProviderID
      _serviceProviderType = source._serviceProviderType
      _firstName = source._firstName
      _lastName = source._lastName
      _specialities = source._specialities
      _gender = source._gender
      _phoneNumbers = source._phoneNumbers
      _addresses = source._addresses
      _applicationInfo = source._applicationInfo
      _emailAddress = source._emailAddress
      _profilePictureURL = source._profilePictureURL
      _languages = source._languages
      _educations = source._educations
      _experiences = source._experiences
      _serviceFee = source._serviceFee
      _serviceFeeCurrency = source._serviceFeeCurrency
      _followUpServiceFee = source._followUpServiceFee
      _appointmentDuration = source._appointmentDuration
      _intervalBetweenAppointment = source._intervalBetweenAppointment
      _status = source._status
      _registrationNumber = source._registrationNumber
      _isActive = source._isActive
      _createdDate = source._createdDate
      _lastModifedDate = source._lastModifedDate
      _serviceProviderDeviceInfo = source._serviceProviderDeviceInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderType) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._firstName) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lastName) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._specialities) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._gender) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._phoneNumbers) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._addresses) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._applicationInfo) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._emailAddress) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._profilePictureURL) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._languages) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._educations) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._experiences) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._serviceFee) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._serviceFeeCurrency) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._followUpServiceFee) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._appointmentDuration) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._intervalBetweenAppointment) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._registrationNumber) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._isActive) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._createdDate) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._lastModifedDate) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderDeviceInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serviceProviderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._serviceProviderType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._firstName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._lastName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._specialities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._specialities, fieldNumber: 5)
      }
      if let v = _storage._gender {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._phoneNumbers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._phoneNumbers, fieldNumber: 7)
      }
      if !_storage._addresses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._addresses, fieldNumber: 8)
      }
      if let v = _storage._applicationInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._emailAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._profilePictureURL {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._languages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._languages, fieldNumber: 12)
      }
      if !_storage._educations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._educations, fieldNumber: 13)
      }
      if !_storage._experiences.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._experiences, fieldNumber: 14)
      }
      if let v = _storage._serviceFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._serviceFeeCurrency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._followUpServiceFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._appointmentDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._intervalBetweenAppointment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._registrationNumber {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._isActive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._lastModifedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._serviceProviderDeviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderProfileMessage, rhs: Nd_V1_ServiceProviderProfileMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serviceProviderID != rhs_storage._serviceProviderID {return false}
        if _storage._serviceProviderType != rhs_storage._serviceProviderType {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._specialities != rhs_storage._specialities {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._phoneNumbers != rhs_storage._phoneNumbers {return false}
        if _storage._addresses != rhs_storage._addresses {return false}
        if _storage._applicationInfo != rhs_storage._applicationInfo {return false}
        if _storage._emailAddress != rhs_storage._emailAddress {return false}
        if _storage._profilePictureURL != rhs_storage._profilePictureURL {return false}
        if _storage._languages != rhs_storage._languages {return false}
        if _storage._educations != rhs_storage._educations {return false}
        if _storage._experiences != rhs_storage._experiences {return false}
        if _storage._serviceFee != rhs_storage._serviceFee {return false}
        if _storage._serviceFeeCurrency != rhs_storage._serviceFeeCurrency {return false}
        if _storage._followUpServiceFee != rhs_storage._followUpServiceFee {return false}
        if _storage._appointmentDuration != rhs_storage._appointmentDuration {return false}
        if _storage._intervalBetweenAppointment != rhs_storage._intervalBetweenAppointment {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._registrationNumber != rhs_storage._registrationNumber {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        if _storage._lastModifedDate != rhs_storage._lastModifedDate {return false}
        if _storage._serviceProviderDeviceInfo != rhs_storage._serviceProviderDeviceInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderServiceRequestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderServiceRequestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ServiceRequestId"),
    2: .same(proto: "Reason"),
    3: .same(proto: "ServiceProviderId"),
    4: .same(proto: "AppointmentId"),
    5: .same(proto: "Examination"),
    6: .same(proto: "Diagnosis"),
    7: .same(proto: "Investigations"),
    8: .same(proto: "Advice"),
    9: .same(proto: "CreatedDateTime"),
    10: .same(proto: "LastModifedDate"),
    11: .same(proto: "CustomerId"),
    12: .same(proto: "Allergy"),
    13: .same(proto: "MedicalHistory"),
  ]

  fileprivate class _StorageClass {
    var _serviceRequestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _reason: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _serviceProviderID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _appointmentID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _examination: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _diagnosis: Nd_V1_ServiceProviderDiagnosisMessage? = nil
    var _investigations: [SwiftProtobuf.Google_Protobuf_StringValue] = []
    var _advice: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _createdDateTime: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _lastModifedDate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _customerID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _allergy: Nd_V1_ServiceProviderAllergyMessage? = nil
    var _medicalHistory: Nd_V1_ServiceProviderMedicalHistoryMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serviceRequestID = source._serviceRequestID
      _reason = source._reason
      _serviceProviderID = source._serviceProviderID
      _appointmentID = source._appointmentID
      _examination = source._examination
      _diagnosis = source._diagnosis
      _investigations = source._investigations
      _advice = source._advice
      _createdDateTime = source._createdDateTime
      _lastModifedDate = source._lastModifedDate
      _customerID = source._customerID
      _allergy = source._allergy
      _medicalHistory = source._medicalHistory
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._serviceRequestID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._reason) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._serviceProviderID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._appointmentID) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._examination) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._diagnosis) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._investigations) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._advice) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._createdDateTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._lastModifedDate) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._customerID) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._allergy) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._medicalHistory) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serviceRequestID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._serviceProviderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._appointmentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._examination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._diagnosis {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._investigations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._investigations, fieldNumber: 7)
      }
      if let v = _storage._advice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._createdDateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._lastModifedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._customerID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._allergy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._medicalHistory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderServiceRequestMessage, rhs: Nd_V1_ServiceProviderServiceRequestMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serviceRequestID != rhs_storage._serviceRequestID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._serviceProviderID != rhs_storage._serviceProviderID {return false}
        if _storage._appointmentID != rhs_storage._appointmentID {return false}
        if _storage._examination != rhs_storage._examination {return false}
        if _storage._diagnosis != rhs_storage._diagnosis {return false}
        if _storage._investigations != rhs_storage._investigations {return false}
        if _storage._advice != rhs_storage._advice {return false}
        if _storage._createdDateTime != rhs_storage._createdDateTime {return false}
        if _storage._lastModifedDate != rhs_storage._lastModifedDate {return false}
        if _storage._customerID != rhs_storage._customerID {return false}
        if _storage._allergy != rhs_storage._allergy {return false}
        if _storage._medicalHistory != rhs_storage._medicalHistory {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nd_V1_ServiceProviderServiceRequestRequestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceProviderServiceRequestRequestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CustomerId"),
    2: .same(proto: "AppointmentId"),
    3: .same(proto: "ServiceRequestId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._customerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appointmentID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._serviceRequestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._customerID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appointmentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._serviceRequestID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nd_V1_ServiceProviderServiceRequestRequestMessage, rhs: Nd_V1_ServiceProviderServiceRequestRequestMessage) -> Bool {
    if lhs._customerID != rhs._customerID {return false}
    if lhs._appointmentID != rhs._appointmentID {return false}
    if lhs._serviceRequestID != rhs._serviceRequestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
