// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: prescription.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Nambadoctor_V1_PrescriptionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appointmentID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nambadoctor_V1_PrescriptionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prescriptionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nambadoctor_V1_PrescriptionObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var appointmentID: String = String()

  var history: String = String()

  var examination: String = String()

  var diagnosis: String = String()

  var diagnosisType: String = String()

  var investigations: [String] = []

  var advice: String = String()

  var doctorID: String = String()

  var patientID: String = String()

  var createdDateTime: Int64 = 0

  var medicines: [Nambadoctor_V1_MedicineObject] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Nambadoctor_V1_MedicineObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicineName: String = String()

  var dosage: String = String()

  var routeOfAdministration: String = String()

  var intake: String = String()

  var duration: Int32 = 0

  var timings: String = String()

  var specialInstructions: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "nambadoctor.v1"

extension Nambadoctor_V1_PrescriptionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrescriptionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AppointmentId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appointmentID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appointmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.appointmentID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nambadoctor_V1_PrescriptionRequest, rhs: Nambadoctor_V1_PrescriptionRequest) -> Bool {
    if lhs.appointmentID != rhs.appointmentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nambadoctor_V1_PrescriptionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrescriptionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrescriptionId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.prescriptionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prescriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.prescriptionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nambadoctor_V1_PrescriptionResponse, rhs: Nambadoctor_V1_PrescriptionResponse) -> Bool {
    if lhs.prescriptionID != rhs.prescriptionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nambadoctor_V1_PrescriptionObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrescriptionObject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "AppointmentId"),
    3: .same(proto: "History"),
    4: .same(proto: "Examination"),
    5: .same(proto: "Diagnosis"),
    6: .same(proto: "DiagnosisType"),
    7: .same(proto: "Investigations"),
    8: .same(proto: "Advice"),
    9: .same(proto: "DoctorId"),
    10: .same(proto: "PatientId"),
    11: .same(proto: "CreatedDateTime"),
    12: .same(proto: "Medicines"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appointmentID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.history) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.examination) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.diagnosis) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.diagnosisType) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.investigations) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.advice) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.doctorID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.patientID) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.createdDateTime) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.medicines) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.appointmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.appointmentID, fieldNumber: 2)
    }
    if !self.history.isEmpty {
      try visitor.visitSingularStringField(value: self.history, fieldNumber: 3)
    }
    if !self.examination.isEmpty {
      try visitor.visitSingularStringField(value: self.examination, fieldNumber: 4)
    }
    if !self.diagnosis.isEmpty {
      try visitor.visitSingularStringField(value: self.diagnosis, fieldNumber: 5)
    }
    if !self.diagnosisType.isEmpty {
      try visitor.visitSingularStringField(value: self.diagnosisType, fieldNumber: 6)
    }
    if !self.investigations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.investigations, fieldNumber: 7)
    }
    if !self.advice.isEmpty {
      try visitor.visitSingularStringField(value: self.advice, fieldNumber: 8)
    }
    if !self.doctorID.isEmpty {
      try visitor.visitSingularStringField(value: self.doctorID, fieldNumber: 9)
    }
    if !self.patientID.isEmpty {
      try visitor.visitSingularStringField(value: self.patientID, fieldNumber: 10)
    }
    if self.createdDateTime != 0 {
      try visitor.visitSingularInt64Field(value: self.createdDateTime, fieldNumber: 11)
    }
    if !self.medicines.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.medicines, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nambadoctor_V1_PrescriptionObject, rhs: Nambadoctor_V1_PrescriptionObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.appointmentID != rhs.appointmentID {return false}
    if lhs.history != rhs.history {return false}
    if lhs.examination != rhs.examination {return false}
    if lhs.diagnosis != rhs.diagnosis {return false}
    if lhs.diagnosisType != rhs.diagnosisType {return false}
    if lhs.investigations != rhs.investigations {return false}
    if lhs.advice != rhs.advice {return false}
    if lhs.doctorID != rhs.doctorID {return false}
    if lhs.patientID != rhs.patientID {return false}
    if lhs.createdDateTime != rhs.createdDateTime {return false}
    if lhs.medicines != rhs.medicines {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nambadoctor_V1_MedicineObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicineObject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MedicineName"),
    2: .same(proto: "Dosage"),
    3: .same(proto: "RouteOfAdministration"),
    4: .same(proto: "Intake"),
    5: .same(proto: "Duration"),
    6: .same(proto: "Timings"),
    7: .same(proto: "SpecialInstructions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.medicineName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dosage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.routeOfAdministration) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.intake) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.duration) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.timings) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.specialInstructions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicineName.isEmpty {
      try visitor.visitSingularStringField(value: self.medicineName, fieldNumber: 1)
    }
    if !self.dosage.isEmpty {
      try visitor.visitSingularStringField(value: self.dosage, fieldNumber: 2)
    }
    if !self.routeOfAdministration.isEmpty {
      try visitor.visitSingularStringField(value: self.routeOfAdministration, fieldNumber: 3)
    }
    if !self.intake.isEmpty {
      try visitor.visitSingularStringField(value: self.intake, fieldNumber: 4)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 5)
    }
    if !self.timings.isEmpty {
      try visitor.visitSingularStringField(value: self.timings, fieldNumber: 6)
    }
    if !self.specialInstructions.isEmpty {
      try visitor.visitSingularStringField(value: self.specialInstructions, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Nambadoctor_V1_MedicineObject, rhs: Nambadoctor_V1_MedicineObject) -> Bool {
    if lhs.medicineName != rhs.medicineName {return false}
    if lhs.dosage != rhs.dosage {return false}
    if lhs.routeOfAdministration != rhs.routeOfAdministration {return false}
    if lhs.intake != rhs.intake {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.timings != rhs.timings {return false}
    if lhs.specialInstructions != rhs.specialInstructions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
