//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: payment.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Nambadoctor_V1_PaymentWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nambadoctor_V1_PaymentWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nambadoctor_V1_PaymentWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getPaymentsOfDoctor(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>

  func getPaymentsOfPatient(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>

  func getSpecificPayment(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentObject>

  func writePayment(
    _ request: Nambadoctor_V1_PaymentObject,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PaymentObject, Nambadoctor_V1_PaymentRequest>
}

extension Nambadoctor_V1_PaymentWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nambadoctor.v1.PaymentWorkerV1"
  }

  /// Unary call to GetPaymentsOfDoctor
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaymentsOfDoctor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaymentsOfDoctor(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.PaymentWorkerV1/GetPaymentsOfDoctor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentsOfDoctorInterceptors() ?? []
    )
  }

  /// Unary call to GetPaymentsOfPatient
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaymentsOfPatient.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPaymentsOfPatient(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.PaymentWorkerV1/GetPaymentsOfPatient",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentsOfPatientInterceptors() ?? []
    )
  }

  /// Unary call to GetSpecificPayment
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSpecificPayment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSpecificPayment(
    _ request: Nambadoctor_V1_PaymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentObject> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.PaymentWorkerV1/GetSpecificPayment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSpecificPaymentInterceptors() ?? []
    )
  }

  /// Unary call to WritePayment
  ///
  /// - Parameters:
  ///   - request: Request to send to WritePayment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writePayment(
    _ request: Nambadoctor_V1_PaymentObject,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PaymentObject, Nambadoctor_V1_PaymentRequest> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.PaymentWorkerV1/WritePayment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWritePaymentInterceptors() ?? []
    )
  }
}

internal protocol Nambadoctor_V1_PaymentWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getPaymentsOfDoctor'.
  func makeGetPaymentsOfDoctorInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>]

  /// - Returns: Interceptors to use when invoking 'getPaymentsOfPatient'.
  func makeGetPaymentsOfPatientInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>]

  /// - Returns: Interceptors to use when invoking 'getSpecificPayment'.
  func makeGetSpecificPaymentInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentObject>]

  /// - Returns: Interceptors to use when invoking 'writePayment'.
  func makeWritePaymentInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PaymentObject, Nambadoctor_V1_PaymentRequest>]
}

internal final class Nambadoctor_V1_PaymentWorkerV1Client: Nambadoctor_V1_PaymentWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nambadoctor_V1_PaymentWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nambadoctor.v1.PaymentWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nambadoctor_V1_PaymentWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nambadoctor_V1_PaymentWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nambadoctor_V1_PaymentWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getPaymentsOfDoctor(request: Nambadoctor_V1_PaymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_PaymentList>

  func getPaymentsOfPatient(request: Nambadoctor_V1_PaymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_PaymentList>

  func getSpecificPayment(request: Nambadoctor_V1_PaymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_PaymentObject>

  func writePayment(request: Nambadoctor_V1_PaymentObject, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_PaymentRequest>
}

extension Nambadoctor_V1_PaymentWorkerV1Provider {
  internal var serviceName: Substring { return "nambadoctor.v1.PaymentWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPaymentsOfDoctor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PaymentRequest>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_PaymentList>(),
        interceptors: self.interceptors?.makeGetPaymentsOfDoctorInterceptors() ?? [],
        userFunction: self.getPaymentsOfDoctor(request:context:)
      )

    case "GetPaymentsOfPatient":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PaymentRequest>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_PaymentList>(),
        interceptors: self.interceptors?.makeGetPaymentsOfPatientInterceptors() ?? [],
        userFunction: self.getPaymentsOfPatient(request:context:)
      )

    case "GetSpecificPayment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PaymentRequest>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_PaymentObject>(),
        interceptors: self.interceptors?.makeGetSpecificPaymentInterceptors() ?? [],
        userFunction: self.getSpecificPayment(request:context:)
      )

    case "WritePayment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PaymentObject>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_PaymentRequest>(),
        interceptors: self.interceptors?.makeWritePaymentInterceptors() ?? [],
        userFunction: self.writePayment(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nambadoctor_V1_PaymentWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getPaymentsOfDoctor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaymentsOfDoctorInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>]

  /// - Returns: Interceptors to use when handling 'getPaymentsOfPatient'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaymentsOfPatientInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentList>]

  /// - Returns: Interceptors to use when handling 'getSpecificPayment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSpecificPaymentInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PaymentRequest, Nambadoctor_V1_PaymentObject>]

  /// - Returns: Interceptors to use when handling 'writePayment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWritePaymentInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PaymentObject, Nambadoctor_V1_PaymentRequest>]
}
