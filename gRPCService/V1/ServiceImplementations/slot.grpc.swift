//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: slot.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Nambadoctor_V1_SlotWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nambadoctor_V1_SlotWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nambadoctor_V1_SlotWorkerV1ClientInterceptorFactoryProtocol? { get }

  func writeSingleSlot(
    _ request: Nambadoctor_V1_SlotObject,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_SlotObject, Nambadoctor_V1_SlotResponse>

  func writeMultipleSlots(
    _ request: Nambadoctor_V1_MultipleSlots,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_MultipleSlots, Nambadoctor_V1_SlotResponse>

  func getAllSlotsOfDoctor(
    _ request: Nambadoctor_V1_SlotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_SlotRequest, Nambadoctor_V1_MultipleSlots>
}

extension Nambadoctor_V1_SlotWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nambadoctor.v1.SlotWorkerV1"
  }

  /// Unary call to WriteSingleSlot
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteSingleSlot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeSingleSlot(
    _ request: Nambadoctor_V1_SlotObject,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_SlotObject, Nambadoctor_V1_SlotResponse> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.SlotWorkerV1/WriteSingleSlot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteSingleSlotInterceptors() ?? []
    )
  }

  /// Unary call to WriteMultipleSlots
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteMultipleSlots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeMultipleSlots(
    _ request: Nambadoctor_V1_MultipleSlots,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_MultipleSlots, Nambadoctor_V1_SlotResponse> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.SlotWorkerV1/WriteMultipleSlots",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteMultipleSlotsInterceptors() ?? []
    )
  }

  /// Unary call to GetAllSlotsOfDoctor
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSlotsOfDoctor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSlotsOfDoctor(
    _ request: Nambadoctor_V1_SlotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_SlotRequest, Nambadoctor_V1_MultipleSlots> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.SlotWorkerV1/GetAllSlotsOfDoctor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSlotsOfDoctorInterceptors() ?? []
    )
  }
}

internal protocol Nambadoctor_V1_SlotWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'writeSingleSlot'.
  func makeWriteSingleSlotInterceptors() -> [ClientInterceptor<Nambadoctor_V1_SlotObject, Nambadoctor_V1_SlotResponse>]

  /// - Returns: Interceptors to use when invoking 'writeMultipleSlots'.
  func makeWriteMultipleSlotsInterceptors() -> [ClientInterceptor<Nambadoctor_V1_MultipleSlots, Nambadoctor_V1_SlotResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllSlotsOfDoctor'.
  func makeGetAllSlotsOfDoctorInterceptors() -> [ClientInterceptor<Nambadoctor_V1_SlotRequest, Nambadoctor_V1_MultipleSlots>]
}

internal final class Nambadoctor_V1_SlotWorkerV1Client: Nambadoctor_V1_SlotWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nambadoctor_V1_SlotWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nambadoctor.v1.SlotWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nambadoctor_V1_SlotWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nambadoctor_V1_SlotWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nambadoctor_V1_SlotWorkerV1ServerInterceptorFactoryProtocol? { get }

  func writeSingleSlot(request: Nambadoctor_V1_SlotObject, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_SlotResponse>

  func writeMultipleSlots(request: Nambadoctor_V1_MultipleSlots, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_SlotResponse>

  func getAllSlotsOfDoctor(request: Nambadoctor_V1_SlotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_MultipleSlots>
}

extension Nambadoctor_V1_SlotWorkerV1Provider {
  internal var serviceName: Substring { return "nambadoctor.v1.SlotWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "WriteSingleSlot":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_SlotObject>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_SlotResponse>(),
        interceptors: self.interceptors?.makeWriteSingleSlotInterceptors() ?? [],
        userFunction: self.writeSingleSlot(request:context:)
      )

    case "WriteMultipleSlots":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_MultipleSlots>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_SlotResponse>(),
        interceptors: self.interceptors?.makeWriteMultipleSlotsInterceptors() ?? [],
        userFunction: self.writeMultipleSlots(request:context:)
      )

    case "GetAllSlotsOfDoctor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_SlotRequest>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_MultipleSlots>(),
        interceptors: self.interceptors?.makeGetAllSlotsOfDoctorInterceptors() ?? [],
        userFunction: self.getAllSlotsOfDoctor(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nambadoctor_V1_SlotWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'writeSingleSlot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteSingleSlotInterceptors() -> [ServerInterceptor<Nambadoctor_V1_SlotObject, Nambadoctor_V1_SlotResponse>]

  /// - Returns: Interceptors to use when handling 'writeMultipleSlots'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteMultipleSlotsInterceptors() -> [ServerInterceptor<Nambadoctor_V1_MultipleSlots, Nambadoctor_V1_SlotResponse>]

  /// - Returns: Interceptors to use when handling 'getAllSlotsOfDoctor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllSlotsOfDoctorInterceptors() -> [ServerInterceptor<Nambadoctor_V1_SlotRequest, Nambadoctor_V1_MultipleSlots>]
}
