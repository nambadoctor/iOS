//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: doctor.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Nambadoctor_V1_DoctorWorkerv1Client`, then call methods of this protocol to make API calls.
internal protocol Nambadoctor_V1_DoctorWorkerv1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nambadoctor_V1_DoctorWorkerv1ClientInterceptorFactoryProtocol? { get }

  func getDoctor(
    _ request: Nambadoctor_V1_DoctorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_DoctorRequest, Nambadoctor_V1_DoctorResponse>

  func upsertDoctor(
    _ request: Nambadoctor_V1_DoctorResponse,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_DoctorResponse, Nambadoctor_V1_DoctorResponse>

  func getAllDoctors(
    _ request: Nambadoctor_V1_PatientsRequestForMultipleDoctors,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PatientsRequestForMultipleDoctors, Nambadoctor_V1_GroupOfDoctors>

  func getPatientsDoctor(
    _ request: Nambadoctor_V1_PatientsRequestForSingleDoctor,
    callOptions: CallOptions?
  ) -> UnaryCall<Nambadoctor_V1_PatientsRequestForSingleDoctor, Nambadoctor_V1_DoctorResponse>
}

extension Nambadoctor_V1_DoctorWorkerv1ClientProtocol {
  internal var serviceName: String {
    return "nambadoctor.v1.DoctorWorkerv1"
  }

  /// Unary call to GetDoctor
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDoctor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDoctor(
    _ request: Nambadoctor_V1_DoctorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_DoctorRequest, Nambadoctor_V1_DoctorResponse> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.DoctorWorkerv1/GetDoctor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDoctorInterceptors() ?? []
    )
  }

  /// Unary call to UpsertDoctor
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertDoctor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upsertDoctor(
    _ request: Nambadoctor_V1_DoctorResponse,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_DoctorResponse, Nambadoctor_V1_DoctorResponse> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.DoctorWorkerv1/UpsertDoctor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertDoctorInterceptors() ?? []
    )
  }

  /// Unary call to GetAllDoctors
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllDoctors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllDoctors(
    _ request: Nambadoctor_V1_PatientsRequestForMultipleDoctors,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PatientsRequestForMultipleDoctors, Nambadoctor_V1_GroupOfDoctors> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.DoctorWorkerv1/GetAllDoctors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllDoctorsInterceptors() ?? []
    )
  }

  /// Unary call to GetPatientsDoctor
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPatientsDoctor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPatientsDoctor(
    _ request: Nambadoctor_V1_PatientsRequestForSingleDoctor,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nambadoctor_V1_PatientsRequestForSingleDoctor, Nambadoctor_V1_DoctorResponse> {
    return self.makeUnaryCall(
      path: "/nambadoctor.v1.DoctorWorkerv1/GetPatientsDoctor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPatientsDoctorInterceptors() ?? []
    )
  }
}

internal protocol Nambadoctor_V1_DoctorWorkerv1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getDoctor'.
  func makeGetDoctorInterceptors() -> [ClientInterceptor<Nambadoctor_V1_DoctorRequest, Nambadoctor_V1_DoctorResponse>]

  /// - Returns: Interceptors to use when invoking 'upsertDoctor'.
  func makeUpsertDoctorInterceptors() -> [ClientInterceptor<Nambadoctor_V1_DoctorResponse, Nambadoctor_V1_DoctorResponse>]

  /// - Returns: Interceptors to use when invoking 'getAllDoctors'.
  func makeGetAllDoctorsInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PatientsRequestForMultipleDoctors, Nambadoctor_V1_GroupOfDoctors>]

  /// - Returns: Interceptors to use when invoking 'getPatientsDoctor'.
  func makeGetPatientsDoctorInterceptors() -> [ClientInterceptor<Nambadoctor_V1_PatientsRequestForSingleDoctor, Nambadoctor_V1_DoctorResponse>]
}

internal final class Nambadoctor_V1_DoctorWorkerv1Client: Nambadoctor_V1_DoctorWorkerv1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nambadoctor_V1_DoctorWorkerv1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nambadoctor.v1.DoctorWorkerv1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nambadoctor_V1_DoctorWorkerv1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nambadoctor_V1_DoctorWorkerv1Provider: CallHandlerProvider {
  var interceptors: Nambadoctor_V1_DoctorWorkerv1ServerInterceptorFactoryProtocol? { get }

  func getDoctor(request: Nambadoctor_V1_DoctorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_DoctorResponse>

  func upsertDoctor(request: Nambadoctor_V1_DoctorResponse, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_DoctorResponse>

  func getAllDoctors(request: Nambadoctor_V1_PatientsRequestForMultipleDoctors, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_GroupOfDoctors>

  func getPatientsDoctor(request: Nambadoctor_V1_PatientsRequestForSingleDoctor, context: StatusOnlyCallContext) -> EventLoopFuture<Nambadoctor_V1_DoctorResponse>
}

extension Nambadoctor_V1_DoctorWorkerv1Provider {
  internal var serviceName: Substring { return "nambadoctor.v1.DoctorWorkerv1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetDoctor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_DoctorRequest>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_DoctorResponse>(),
        interceptors: self.interceptors?.makeGetDoctorInterceptors() ?? [],
        userFunction: self.getDoctor(request:context:)
      )

    case "UpsertDoctor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_DoctorResponse>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_DoctorResponse>(),
        interceptors: self.interceptors?.makeUpsertDoctorInterceptors() ?? [],
        userFunction: self.upsertDoctor(request:context:)
      )

    case "GetAllDoctors":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PatientsRequestForMultipleDoctors>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_GroupOfDoctors>(),
        interceptors: self.interceptors?.makeGetAllDoctorsInterceptors() ?? [],
        userFunction: self.getAllDoctors(request:context:)
      )

    case "GetPatientsDoctor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nambadoctor_V1_PatientsRequestForSingleDoctor>(),
        responseSerializer: ProtobufSerializer<Nambadoctor_V1_DoctorResponse>(),
        interceptors: self.interceptors?.makeGetPatientsDoctorInterceptors() ?? [],
        userFunction: self.getPatientsDoctor(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nambadoctor_V1_DoctorWorkerv1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getDoctor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDoctorInterceptors() -> [ServerInterceptor<Nambadoctor_V1_DoctorRequest, Nambadoctor_V1_DoctorResponse>]

  /// - Returns: Interceptors to use when handling 'upsertDoctor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertDoctorInterceptors() -> [ServerInterceptor<Nambadoctor_V1_DoctorResponse, Nambadoctor_V1_DoctorResponse>]

  /// - Returns: Interceptors to use when handling 'getAllDoctors'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllDoctorsInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PatientsRequestForMultipleDoctors, Nambadoctor_V1_GroupOfDoctors>]

  /// - Returns: Interceptors to use when handling 'getPatientsDoctor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPatientsDoctorInterceptors() -> [ServerInterceptor<Nambadoctor_V1_PatientsRequestForSingleDoctor, Nambadoctor_V1_DoctorResponse>]
}
