//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ServiceProviderAndCustomer.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Nd_V1_LoggingWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_LoggingWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_LoggingWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setLog(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_BoolMessage>
}

extension Nd_V1_LoggingWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.LoggingWorkerV1"
  }

  /// Unary call to SetLog
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLog.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setLog(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_BoolMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.LoggingWorkerV1/SetLog",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLogInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_LoggingWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setLog'.
  func makeSetLogInterceptors() -> [ClientInterceptor<Nd_V1_VoidMessage, Nd_V1_BoolMessage>]
}

internal final class Nd_V1_LoggingWorkerV1Client: Nd_V1_LoggingWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_LoggingWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.LoggingWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_LoggingWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_NotificationWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_NotificationWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_NotificationWorkerV1ClientInterceptorFactoryProtocol? { get }

  func sendNotification(
    _ request: Nd_V1_NotificationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_NotificationRequestMessage, Nd_V1_BoolMessage>
}

extension Nd_V1_NotificationWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.NotificationWorkerV1"
  }

  /// Unary call to SendNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to SendNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendNotification(
    _ request: Nd_V1_NotificationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_NotificationRequestMessage, Nd_V1_BoolMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.NotificationWorkerV1/SendNotification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_NotificationWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sendNotification'.
  func makeSendNotificationInterceptors() -> [ClientInterceptor<Nd_V1_NotificationRequestMessage, Nd_V1_BoolMessage>]
}

internal final class Nd_V1_NotificationWorkerV1Client: Nd_V1_NotificationWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_NotificationWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.NotificationWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_NotificationWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_TwilioWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_TwilioWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_TwilioWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getTwilioVideoAuthToken(
    _ request: Nd_V1_TwilioAuthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_TwilioAuthRequest, Nd_V1_StringMessage>

  func getTwilioChatAuthToken(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage>
}

extension Nd_V1_TwilioWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.TwilioWorkerV1"
  }

  /// Unary call to GetTwilioVideoAuthToken
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTwilioVideoAuthToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTwilioVideoAuthToken(
    _ request: Nd_V1_TwilioAuthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_TwilioAuthRequest, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.TwilioWorkerV1/GetTwilioVideoAuthToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTwilioVideoAuthTokenInterceptors() ?? []
    )
  }

  /// Unary call to GetTwilioChatAuthToken
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTwilioChatAuthToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTwilioChatAuthToken(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.TwilioWorkerV1/GetTwilioChatAuthToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTwilioChatAuthTokenInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_TwilioWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getTwilioVideoAuthToken'.
  func makeGetTwilioVideoAuthTokenInterceptors() -> [ClientInterceptor<Nd_V1_TwilioAuthRequest, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when invoking 'getTwilioChatAuthToken'.
  func makeGetTwilioChatAuthTokenInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}

internal final class Nd_V1_TwilioWorkerV1Client: Nd_V1_TwilioWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_TwilioWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.TwilioWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_TwilioWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_UserTypeWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_UserTypeWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_UserTypeWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getUserType(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_StringMessage>
}

extension Nd_V1_UserTypeWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.UserTypeWorkerV1"
  }

  /// Unary call to GetUserType
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserType(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.UserTypeWorkerV1/GetUserType",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserTypeInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_UserTypeWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getUserType'.
  func makeGetUserTypeInterceptors() -> [ClientInterceptor<Nd_V1_VoidMessage, Nd_V1_StringMessage>]
}

internal final class Nd_V1_UserTypeWorkerV1Client: Nd_V1_UserTypeWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_UserTypeWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.UserTypeWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_UserTypeWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerAppointmentWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerAppointmentWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerAppointmentWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setAppointment(
    _ request: Nd_V1_CustomerAppointmentMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerAppointmentMessage, Nd_V1_IdMessage>

  func getAppointment(
    _ request: Nd_V1_CustomerAppointmentRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerAppointmentMessage>

  func getAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerAppointmentList>

  func getAppointmentPayments(
    _ request: Nd_V1_CustomerAppointmentRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerPaymentListMessage>

  func setNewPayment(
    _ request: Nd_V1_CustomerPaymentInfoMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerPaymentInfoMessage, Nd_V1_IdMessage>
}

extension Nd_V1_CustomerAppointmentWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerAppointmentWorkerV1"
  }

  /// Unary call to SetAppointment
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAppointment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAppointment(
    _ request: Nd_V1_CustomerAppointmentMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerAppointmentMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerAppointmentWorkerV1/SetAppointment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAppointmentInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointment
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointment(
    _ request: Nd_V1_CustomerAppointmentRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerAppointmentMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerAppointmentWorkerV1/GetAppointment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerAppointmentList> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerAppointmentWorkerV1/GetAppointments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentsInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointmentPayments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointmentPayments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointmentPayments(
    _ request: Nd_V1_CustomerAppointmentRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerPaymentListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerAppointmentWorkerV1/GetAppointmentPayments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentPaymentsInterceptors() ?? []
    )
  }

  /// Unary call to SetNewPayment
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNewPayment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setNewPayment(
    _ request: Nd_V1_CustomerPaymentInfoMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerPaymentInfoMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerAppointmentWorkerV1/SetNewPayment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNewPaymentInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerAppointmentWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setAppointment'.
  func makeSetAppointmentInterceptors() -> [ClientInterceptor<Nd_V1_CustomerAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointment'.
  func makeGetAppointmentInterceptors() -> [ClientInterceptor<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerAppointmentMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointments'.
  func makeGetAppointmentsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerAppointmentList>]

  /// - Returns: Interceptors to use when invoking 'getAppointmentPayments'.
  func makeGetAppointmentPaymentsInterceptors() -> [ClientInterceptor<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerPaymentListMessage>]

  /// - Returns: Interceptors to use when invoking 'setNewPayment'.
  func makeSetNewPaymentInterceptors() -> [ClientInterceptor<Nd_V1_CustomerPaymentInfoMessage, Nd_V1_IdMessage>]
}

internal final class Nd_V1_CustomerAppointmentWorkerV1Client: Nd_V1_CustomerAppointmentWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerAppointmentWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerAppointmentWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerAppointmentWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setCustomerProfile(
    _ request: Nd_V1_CustomerCustomerProfileMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerCustomerProfileMessage, Nd_V1_IdMessage>

  func getCustomerProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerCustomerProfileMessage>

  func getLatestFollowUpWithServiceProvider(
    _ request: Nd_V1_CustomerFollowUpRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerFollowUpRequestMessage, Nd_V1_CustomerFollowUpMessage>

  func setChildProfile(
    _ request: Nd_V1_CustomerChildProfileUploadMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerChildProfileUploadMessage, Nd_V1_IdMessage>

  func getTrustScore(
    _ request: Nd_V1_CustomerTrustScoreRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerTrustScoreRequestMessage, Nd_V1_IntMessage>
}

extension Nd_V1_CustomerWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerWorkerV1"
  }

  /// Unary call to SetCustomerProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCustomerProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCustomerProfile(
    _ request: Nd_V1_CustomerCustomerProfileMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerCustomerProfileMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerWorkerV1/SetCustomerProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCustomerProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomerProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerCustomerProfileMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerWorkerV1/GetCustomerProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetLatestFollowUpWithServiceProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLatestFollowUpWithServiceProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLatestFollowUpWithServiceProvider(
    _ request: Nd_V1_CustomerFollowUpRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerFollowUpRequestMessage, Nd_V1_CustomerFollowUpMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerWorkerV1/GetLatestFollowUpWithServiceProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLatestFollowUpWithServiceProviderInterceptors() ?? []
    )
  }

  /// Unary call to SetChildProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to SetChildProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setChildProfile(
    _ request: Nd_V1_CustomerChildProfileUploadMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerChildProfileUploadMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerWorkerV1/SetChildProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetChildProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetTrustScore
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTrustScore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTrustScore(
    _ request: Nd_V1_CustomerTrustScoreRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerTrustScoreRequestMessage, Nd_V1_IntMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerWorkerV1/GetTrustScore",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTrustScoreInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setCustomerProfile'.
  func makeSetCustomerProfileInterceptors() -> [ClientInterceptor<Nd_V1_CustomerCustomerProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getCustomerProfile'.
  func makeGetCustomerProfileInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerCustomerProfileMessage>]

  /// - Returns: Interceptors to use when invoking 'getLatestFollowUpWithServiceProvider'.
  func makeGetLatestFollowUpWithServiceProviderInterceptors() -> [ClientInterceptor<Nd_V1_CustomerFollowUpRequestMessage, Nd_V1_CustomerFollowUpMessage>]

  /// - Returns: Interceptors to use when invoking 'setChildProfile'.
  func makeSetChildProfileInterceptors() -> [ClientInterceptor<Nd_V1_CustomerChildProfileUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getTrustScore'.
  func makeGetTrustScoreInterceptors() -> [ClientInterceptor<Nd_V1_CustomerTrustScoreRequestMessage, Nd_V1_IntMessage>]
}

internal final class Nd_V1_CustomerWorkerV1Client: Nd_V1_CustomerWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerOrganisationWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerOrganisationWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerOrganisationWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setOrganisation(
    _ request: Nd_V1_CustomerOrganisationMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerOrganisationMessage, Nd_V1_IdMessage>

  func getOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationMessage>

  func getOrganisations(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationListMessage>

  func getSpecificOrganisations(
    _ request: Nd_V1_StringArrayMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_StringArrayMessage, Nd_V1_CustomerOrganisationListMessage>
}

extension Nd_V1_CustomerOrganisationWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerOrganisationWorkerV1"
  }

  /// Unary call to SetOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setOrganisation(
    _ request: Nd_V1_CustomerOrganisationMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerOrganisationMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerOrganisationWorkerV1/SetOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerOrganisationWorkerV1/GetOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisations(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerOrganisationWorkerV1/GetOrganisations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationsInterceptors() ?? []
    )
  }

  /// Unary call to GetSpecificOrganisations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSpecificOrganisations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSpecificOrganisations(
    _ request: Nd_V1_StringArrayMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_StringArrayMessage, Nd_V1_CustomerOrganisationListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerOrganisationWorkerV1/GetSpecificOrganisations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSpecificOrganisationsInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerOrganisationWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setOrganisation'.
  func makeSetOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_CustomerOrganisationMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getOrganisation'.
  func makeGetOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationMessage>]

  /// - Returns: Interceptors to use when invoking 'getOrganisations'.
  func makeGetOrganisationsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationListMessage>]

  /// - Returns: Interceptors to use when invoking 'getSpecificOrganisations'.
  func makeGetSpecificOrganisationsInterceptors() -> [ClientInterceptor<Nd_V1_StringArrayMessage, Nd_V1_CustomerOrganisationListMessage>]
}

internal final class Nd_V1_CustomerOrganisationWorkerV1Client: Nd_V1_CustomerOrganisationWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerOrganisationWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerOrganisationWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerOrganisationWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerPrescriptionWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerPrescriptionWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerPrescriptionWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getPrescription(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerPrescriptionMessage>

  func downloadPrescriptionMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage>

  func getPrescriptionPdf(
    _ request: Nd_V1_RequestPdf,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>
}

extension Nd_V1_CustomerPrescriptionWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerPrescriptionWorkerV1"
  }

  /// Unary call to GetPrescription
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrescription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPrescription(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerPrescriptionMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerPrescriptionWorkerV1/GetPrescription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrescriptionInterceptors() ?? []
    )
  }

  /// Unary call to DownloadPrescriptionMedia
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadPrescriptionMedia.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func downloadPrescriptionMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerPrescriptionWorkerV1/DownloadPrescriptionMedia",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadPrescriptionMediaInterceptors() ?? []
    )
  }

  /// Unary call to GetPrescriptionPdf
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrescriptionPdf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPrescriptionPdf(
    _ request: Nd_V1_RequestPdf,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_RequestPdf, Nd_V1_ResponsePdf> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerPrescriptionWorkerV1/GetPrescriptionPdf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrescriptionPdfInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerPrescriptionWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getPrescription'.
  func makeGetPrescriptionInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerPrescriptionMessage>]

  /// - Returns: Interceptors to use when invoking 'downloadPrescriptionMedia'.
  func makeDownloadPrescriptionMediaInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when invoking 'getPrescriptionPdf'.
  func makeGetPrescriptionPdfInterceptors() -> [ClientInterceptor<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>]
}

internal final class Nd_V1_CustomerPrescriptionWorkerV1Client: Nd_V1_CustomerPrescriptionWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerPrescriptionWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerPrescriptionWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerPrescriptionWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerReportWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerReportWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerReportWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getReports(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerReportListMessage>

  func getAppointmentReports(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerReportListMessage>

  func setReport(
    _ request: Nd_V1_CustomerReportUploadMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerReportUploadMessage, Nd_V1_IdMessage>

  func downloadReportMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage>
}

extension Nd_V1_CustomerReportWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerReportWorkerV1"
  }

  /// Unary call to GetReports
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReports(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerReportListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerReportWorkerV1/GetReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportsInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointmentReports
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointmentReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointmentReports(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerReportListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerReportWorkerV1/GetAppointmentReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentReportsInterceptors() ?? []
    )
  }

  /// Unary call to SetReport
  ///
  /// - Parameters:
  ///   - request: Request to send to SetReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setReport(
    _ request: Nd_V1_CustomerReportUploadMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerReportUploadMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerReportWorkerV1/SetReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetReportInterceptors() ?? []
    )
  }

  /// Unary call to DownloadReportMedia
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadReportMedia.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func downloadReportMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerReportWorkerV1/DownloadReportMedia",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadReportMediaInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerReportWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getReports'.
  func makeGetReportsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerReportListMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointmentReports'.
  func makeGetAppointmentReportsInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerReportListMessage>]

  /// - Returns: Interceptors to use when invoking 'setReport'.
  func makeSetReportInterceptors() -> [ClientInterceptor<Nd_V1_CustomerReportUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'downloadReportMedia'.
  func makeDownloadReportMediaInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}

internal final class Nd_V1_CustomerReportWorkerV1Client: Nd_V1_CustomerReportWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerReportWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerReportWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerReportWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerServiceProviderWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerServiceProviderWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerServiceProviderWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getServiceProviderProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileMessage>

  func getServiceProviders(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>

  func getServiceProvidersOfOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>

  func getServiceProviderAvailablity(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerAvailabilityConfigList>

  func getServiceProviderAvailableSlots(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerGeneratedSlotListMessage>

  func getServiceProviderAvailablityForOrganisation(
    _ request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerAvailabilityConfigList>

  func getServiceProviderAvailableSlotsForOrganisation(
    _ request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerGeneratedSlotListMessage>

  func getAllSpecialties(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>
}

extension Nd_V1_CustomerServiceProviderWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerServiceProviderWorkerV1"
  }

  /// Unary call to GetServiceProviderProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviderProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviders
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviders(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProvidersInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProvidersOfOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProvidersOfOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProvidersOfOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProvidersOfOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProvidersOfOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailablity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailablity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailablity(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerAvailabilityConfigList> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviderAvailablity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailablityInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailableSlots
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailableSlots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailableSlots(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_CustomerGeneratedSlotListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviderAvailableSlots",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailablityForOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailablityForOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailablityForOrganisation(
    _ request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerAvailabilityConfigList> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviderAvailablityForOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailablityForOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailableSlotsForOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailableSlotsForOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailableSlotsForOrganisation(
    _ request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerGeneratedSlotListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetServiceProviderAvailableSlotsForOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetAllSpecialties
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSpecialties.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSpecialties(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceProviderWorkerV1/GetAllSpecialties",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSpecialtiesInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerServiceProviderWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getServiceProviderProfile'.
  func makeGetServiceProviderProfileInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviders'.
  func makeGetServiceProvidersInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProvidersOfOrganisation'.
  func makeGetServiceProvidersOfOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailablity'.
  func makeGetServiceProviderAvailablityInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerAvailabilityConfigList>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailableSlots'.
  func makeGetServiceProviderAvailableSlotsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailablityForOrganisation'.
  func makeGetServiceProviderAvailablityForOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerAvailabilityConfigList>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailableSlotsForOrganisation'.
  func makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when invoking 'getAllSpecialties'.
  func makeGetAllSpecialtiesInterceptors() -> [ClientInterceptor<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>]
}

internal final class Nd_V1_CustomerServiceProviderWorkerV1Client: Nd_V1_CustomerServiceProviderWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerServiceProviderWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerServiceProviderWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerServiceProviderWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_CustomerServiceRequestWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_CustomerServiceRequestWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_CustomerServiceRequestWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setServiceRequest(
    _ request: Nd_V1_CustomerServiceRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestMessage, Nd_V1_IdMessage>

  func getServiceRequest(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerServiceRequestMessage>
}

extension Nd_V1_CustomerServiceRequestWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.CustomerServiceRequestWorkerV1"
  }

  /// Unary call to SetServiceRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to SetServiceRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setServiceRequest(
    _ request: Nd_V1_CustomerServiceRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceRequestWorkerV1/SetServiceRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetServiceRequestInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceRequest(
    _ request: Nd_V1_CustomerServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerServiceRequestMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.CustomerServiceRequestWorkerV1/GetServiceRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceRequestInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_CustomerServiceRequestWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setServiceRequest'.
  func makeSetServiceRequestInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceRequestMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceRequest'.
  func makeGetServiceRequestInterceptors() -> [ClientInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerServiceRequestMessage>]
}

internal final class Nd_V1_CustomerServiceRequestWorkerV1Client: Nd_V1_CustomerServiceRequestWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_CustomerServiceRequestWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.CustomerServiceRequestWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_CustomerServiceRequestWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderAppointmentWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderAppointmentWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderAppointmentWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>

  func transferAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>

  func getAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderAppointmentMessage>

  func getAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>

  func getOrganisationAppointmentsofServiceProvider(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAppointmentList>

  func getOrganisationAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>

  func getCustomerAppointments(
    _ request: Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage, Nd_V1_ServiceProviderAppointmentList>

  func getAppointmentPayments(
    _ request: Nd_V1_ServiceProviderAppointmentRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderPaymentListMessage>

  func getPayments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderPaymentListMessage>
}

extension Nd_V1_ServiceProviderAppointmentWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderAppointmentWorkerV1"
  }

  /// Unary call to SetAppointment
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAppointment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/SetAppointment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAppointmentInterceptors() ?? []
    )
  }

  /// Unary call to TransferAppointment
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferAppointment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/TransferAppointment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferAppointmentInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointment
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointment(
    _ request: Nd_V1_ServiceProviderAppointmentRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderAppointmentMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetAppointment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetAppointments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentsInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisationAppointmentsofServiceProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisationAppointmentsofServiceProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisationAppointmentsofServiceProvider(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAppointmentList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetOrganisationAppointmentsofServiceProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationAppointmentsofServiceProviderInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisationAppointments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisationAppointments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisationAppointments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetOrganisationAppointments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationAppointmentsInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomerAppointments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerAppointments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerAppointments(
    _ request: Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage, Nd_V1_ServiceProviderAppointmentList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetCustomerAppointments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerAppointmentsInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointmentPayments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointmentPayments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointmentPayments(
    _ request: Nd_V1_ServiceProviderAppointmentRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderPaymentListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetAppointmentPayments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentPaymentsInterceptors() ?? []
    )
  }

  /// Unary call to GetPayments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPayments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPayments(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderPaymentListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderAppointmentWorkerV1/GetPayments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentsInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderAppointmentWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setAppointment'.
  func makeSetAppointmentInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'transferAppointment'.
  func makeTransferAppointmentInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointment'.
  func makeGetAppointmentInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderAppointmentMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointments'.
  func makeGetAppointmentsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when invoking 'getOrganisationAppointmentsofServiceProvider'.
  func makeGetOrganisationAppointmentsofServiceProviderInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when invoking 'getOrganisationAppointments'.
  func makeGetOrganisationAppointmentsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when invoking 'getCustomerAppointments'.
  func makeGetCustomerAppointmentsInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when invoking 'getAppointmentPayments'.
  func makeGetAppointmentPaymentsInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderPaymentListMessage>]

  /// - Returns: Interceptors to use when invoking 'getPayments'.
  func makeGetPaymentsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderPaymentListMessage>]
}

internal final class Nd_V1_ServiceProviderAppointmentWorkerV1Client: Nd_V1_ServiceProviderAppointmentWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderAppointmentWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderAppointmentWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderAppointmentWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderCustomerWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderCustomerWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderCustomerWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setCustomerProfile(
    _ request: Nd_V1_ServiceProviderCustomerProfileMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderCustomerProfileMessage, Nd_V1_IdMessage>

  func getCustomerProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderCustomerProfileMessage>

  func getCustomerProfileFromPhoneNumber(
    _ request: Nd_V1_StringMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_StringMessage, Nd_V1_ServiceProviderMyPatientsProfileMessage>

  func getCustomers(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>

  func getCustomerAppointmentSummary(
    _ request: Nd_V1_ServiceProviderAppointmentSummaryRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentSummaryRequestMessage, Nd_V1_ServiceProviderAppointmentSummaryListMessage>

  func getCustomersOfOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>

  func getCustomersOfServiceProviderInOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>
}

extension Nd_V1_ServiceProviderCustomerWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderCustomerWorkerV1"
  }

  /// Unary call to SetCustomerProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCustomerProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCustomerProfile(
    _ request: Nd_V1_ServiceProviderCustomerProfileMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderCustomerProfileMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/SetCustomerProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCustomerProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomerProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderCustomerProfileMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomerProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomerProfileFromPhoneNumber
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerProfileFromPhoneNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerProfileFromPhoneNumber(
    _ request: Nd_V1_StringMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_StringMessage, Nd_V1_ServiceProviderMyPatientsProfileMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomerProfileFromPhoneNumber",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerProfileFromPhoneNumberInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomers(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomersInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomerAppointmentSummary
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerAppointmentSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerAppointmentSummary(
    _ request: Nd_V1_ServiceProviderAppointmentSummaryRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAppointmentSummaryRequestMessage, Nd_V1_ServiceProviderAppointmentSummaryListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomerAppointmentSummary",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerAppointmentSummaryInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomersOfOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomersOfOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomersOfOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomersOfOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomersOfOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetCustomersOfServiceProviderInOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomersOfServiceProviderInOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomersOfServiceProviderInOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderCustomerWorkerV1/GetCustomersOfServiceProviderInOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomersOfServiceProviderInOrganisationInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderCustomerWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setCustomerProfile'.
  func makeSetCustomerProfileInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderCustomerProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getCustomerProfile'.
  func makeGetCustomerProfileInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderCustomerProfileMessage>]

  /// - Returns: Interceptors to use when invoking 'getCustomerProfileFromPhoneNumber'.
  func makeGetCustomerProfileFromPhoneNumberInterceptors() -> [ClientInterceptor<Nd_V1_StringMessage, Nd_V1_ServiceProviderMyPatientsProfileMessage>]

  /// - Returns: Interceptors to use when invoking 'getCustomers'.
  func makeGetCustomersInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]

  /// - Returns: Interceptors to use when invoking 'getCustomerAppointmentSummary'.
  func makeGetCustomerAppointmentSummaryInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAppointmentSummaryRequestMessage, Nd_V1_ServiceProviderAppointmentSummaryListMessage>]

  /// - Returns: Interceptors to use when invoking 'getCustomersOfOrganisation'.
  func makeGetCustomersOfOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]

  /// - Returns: Interceptors to use when invoking 'getCustomersOfServiceProviderInOrganisation'.
  func makeGetCustomersOfServiceProviderInOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]
}

internal final class Nd_V1_ServiceProviderCustomerWorkerV1Client: Nd_V1_ServiceProviderCustomerWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderCustomerWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderCustomerWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderCustomerWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderOrganisationWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderOrganisationWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderOrganisationWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setOrganisation(
    _ request: Nd_V1_ServiceProviderOrganisationMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderOrganisationMessage, Nd_V1_IdMessage>

  func getOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationMessage>

  func getOrganisations(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationListMessage>

  func getSpecificOrganisations(
    _ request: Nd_V1_StringArrayMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_StringArrayMessage, Nd_V1_ServiceProviderOrganisationListMessage>
}

extension Nd_V1_ServiceProviderOrganisationWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderOrganisationWorkerV1"
  }

  /// Unary call to SetOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setOrganisation(
    _ request: Nd_V1_ServiceProviderOrganisationMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderOrganisationMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderOrganisationWorkerV1/SetOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderOrganisationWorkerV1/GetOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganisations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganisations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganisations(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderOrganisationWorkerV1/GetOrganisations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganisationsInterceptors() ?? []
    )
  }

  /// Unary call to GetSpecificOrganisations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSpecificOrganisations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSpecificOrganisations(
    _ request: Nd_V1_StringArrayMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_StringArrayMessage, Nd_V1_ServiceProviderOrganisationListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderOrganisationWorkerV1/GetSpecificOrganisations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSpecificOrganisationsInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderOrganisationWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setOrganisation'.
  func makeSetOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderOrganisationMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getOrganisation'.
  func makeGetOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationMessage>]

  /// - Returns: Interceptors to use when invoking 'getOrganisations'.
  func makeGetOrganisationsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationListMessage>]

  /// - Returns: Interceptors to use when invoking 'getSpecificOrganisations'.
  func makeGetSpecificOrganisationsInterceptors() -> [ClientInterceptor<Nd_V1_StringArrayMessage, Nd_V1_ServiceProviderOrganisationListMessage>]
}

internal final class Nd_V1_ServiceProviderOrganisationWorkerV1Client: Nd_V1_ServiceProviderOrganisationWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderOrganisationWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderOrganisationWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderOrganisationWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderPrescriptionWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderPrescriptionWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderPrescriptionWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getPrescription(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderPrescriptionMessage>

  func setPrescription(
    _ request: Nd_V1_ServiceProviderPrescriptionMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderPrescriptionMessage, Nd_V1_IdMessage>

  func downloadPrescriptionMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage>

  func getPrescriptionPdf(
    _ request: Nd_V1_RequestPdf,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>
}

extension Nd_V1_ServiceProviderPrescriptionWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderPrescriptionWorkerV1"
  }

  /// Unary call to GetPrescription
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrescription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPrescription(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderPrescriptionMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderPrescriptionWorkerV1/GetPrescription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrescriptionInterceptors() ?? []
    )
  }

  /// Unary call to SetPrescription
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPrescription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPrescription(
    _ request: Nd_V1_ServiceProviderPrescriptionMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderPrescriptionMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderPrescriptionWorkerV1/SetPrescription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPrescriptionInterceptors() ?? []
    )
  }

  /// Unary call to DownloadPrescriptionMedia
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadPrescriptionMedia.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func downloadPrescriptionMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderPrescriptionWorkerV1/DownloadPrescriptionMedia",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadPrescriptionMediaInterceptors() ?? []
    )
  }

  /// Unary call to GetPrescriptionPdf
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrescriptionPdf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPrescriptionPdf(
    _ request: Nd_V1_RequestPdf,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_RequestPdf, Nd_V1_ResponsePdf> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderPrescriptionWorkerV1/GetPrescriptionPdf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrescriptionPdfInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderPrescriptionWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getPrescription'.
  func makeGetPrescriptionInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderPrescriptionMessage>]

  /// - Returns: Interceptors to use when invoking 'setPrescription'.
  func makeSetPrescriptionInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderPrescriptionMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'downloadPrescriptionMedia'.
  func makeDownloadPrescriptionMediaInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when invoking 'getPrescriptionPdf'.
  func makeGetPrescriptionPdfInterceptors() -> [ClientInterceptor<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>]
}

internal final class Nd_V1_ServiceProviderPrescriptionWorkerV1Client: Nd_V1_ServiceProviderPrescriptionWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderPrescriptionWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderPrescriptionWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderPrescriptionWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderReportWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderReportWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderReportWorkerV1ClientInterceptorFactoryProtocol? { get }

  func getCustomerReports(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderReportListMessage>

  func getAppointmentReports(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderReportListMessage>

  func setReport(
    _ request: Nd_V1_ServiceProviderReportUploadMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderReportUploadMessage, Nd_V1_IdMessage>

  func downloadReportMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage>
}

extension Nd_V1_ServiceProviderReportWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderReportWorkerV1"
  }

  /// Unary call to GetCustomerReports
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCustomerReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCustomerReports(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderReportListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderReportWorkerV1/GetCustomerReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCustomerReportsInterceptors() ?? []
    )
  }

  /// Unary call to GetAppointmentReports
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppointmentReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppointmentReports(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderReportListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderReportWorkerV1/GetAppointmentReports",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppointmentReportsInterceptors() ?? []
    )
  }

  /// Unary call to SetReport
  ///
  /// - Parameters:
  ///   - request: Request to send to SetReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setReport(
    _ request: Nd_V1_ServiceProviderReportUploadMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderReportUploadMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderReportWorkerV1/SetReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetReportInterceptors() ?? []
    )
  }

  /// Unary call to DownloadReportMedia
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadReportMedia.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func downloadReportMedia(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_StringMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderReportWorkerV1/DownloadReportMedia",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadReportMediaInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderReportWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getCustomerReports'.
  func makeGetCustomerReportsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderReportListMessage>]

  /// - Returns: Interceptors to use when invoking 'getAppointmentReports'.
  func makeGetAppointmentReportsInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderReportListMessage>]

  /// - Returns: Interceptors to use when invoking 'setReport'.
  func makeSetReportInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderReportUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'downloadReportMedia'.
  func makeDownloadReportMediaInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}

internal final class Nd_V1_ServiceProviderReportWorkerV1Client: Nd_V1_ServiceProviderReportWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderReportWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderReportWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderReportWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setServiceProviderProfile(
    _ request: Nd_V1_ServiceProviderProfileMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderProfileMessage, Nd_V1_IdMessage>

  func getServiceProviderProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileMessage>

  func setServiceProviderAvailability(
    _ request: Nd_V1_ServiceProviderAvailabilityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderAvailabilityRequest, Nd_V1_IdMessage>

  func getServiceProviderAvailablity(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAvailabilityConfigList>

  func getServiceProviderAvailableSlots(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>

  func getServiceProviderAvailablityForOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAvailabilityConfigList>

  func getServiceProviderAvailableSlotsForOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>

  func getAutoFillMedicines(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAutofillMedicineListMessage>

  func setAutoFillMedicines(
    _ request: Nd_V1_ServiceProviderMedicineMessageList,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderMedicineMessageList, Nd_V1_IdMessage>

  func getServiceProviders(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>

  func getServiceProvidersOfOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>

  func getAllSpecialties(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>

  func getConfigurableEntryFields(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderConfigurableEntryFieldsMessage>
}

extension Nd_V1_ServiceProviderWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderWorkerV1"
  }

  /// Unary call to SetServiceProviderProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to SetServiceProviderProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setServiceProviderProfile(
    _ request: Nd_V1_ServiceProviderProfileMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderProfileMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/SetServiceProviderProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetServiceProviderProfileInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderProfile(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviderProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderProfileInterceptors() ?? []
    )
  }

  /// Unary call to SetServiceProviderAvailability
  ///
  /// - Parameters:
  ///   - request: Request to send to SetServiceProviderAvailability.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setServiceProviderAvailability(
    _ request: Nd_V1_ServiceProviderAvailabilityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderAvailabilityRequest, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/SetServiceProviderAvailability",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetServiceProviderAvailabilityInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailablity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailablity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailablity(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAvailabilityConfigList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviderAvailablity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailablityInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailableSlots
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailableSlots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailableSlots(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviderAvailableSlots",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailablityForOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailablityForOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailablityForOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAvailabilityConfigList> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviderAvailablityForOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailablityForOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviderAvailableSlotsForOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviderAvailableSlotsForOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviderAvailableSlotsForOrganisation(
    _ request: Nd_V1_ServiceProviderInOrganisationRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviderAvailableSlotsForOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetAutoFillMedicines
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAutoFillMedicines.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAutoFillMedicines(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderAutofillMedicineListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetAutoFillMedicines",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAutoFillMedicinesInterceptors() ?? []
    )
  }

  /// Unary call to SetAutoFillMedicines
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAutoFillMedicines.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAutoFillMedicines(
    _ request: Nd_V1_ServiceProviderMedicineMessageList,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderMedicineMessageList, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/SetAutoFillMedicines",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAutoFillMedicinesInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProviders
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProviders(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProviders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProvidersInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceProvidersOfOrganisation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceProvidersOfOrganisation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceProvidersOfOrganisation(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetServiceProvidersOfOrganisation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceProvidersOfOrganisationInterceptors() ?? []
    )
  }

  /// Unary call to GetAllSpecialties
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllSpecialties.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllSpecialties(
    _ request: Nd_V1_VoidMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetAllSpecialties",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllSpecialtiesInterceptors() ?? []
    )
  }

  /// Unary call to GetConfigurableEntryFields
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConfigurableEntryFields.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConfigurableEntryFields(
    _ request: Nd_V1_IdMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_IdMessage, Nd_V1_ServiceProviderConfigurableEntryFieldsMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderWorkerV1/GetConfigurableEntryFields",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConfigurableEntryFieldsInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setServiceProviderProfile'.
  func makeSetServiceProviderProfileInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderProfile'.
  func makeGetServiceProviderProfileInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileMessage>]

  /// - Returns: Interceptors to use when invoking 'setServiceProviderAvailability'.
  func makeSetServiceProviderAvailabilityInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderAvailabilityRequest, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailablity'.
  func makeGetServiceProviderAvailablityInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAvailabilityConfigList>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailableSlots'.
  func makeGetServiceProviderAvailableSlotsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailablityForOrganisation'.
  func makeGetServiceProviderAvailablityForOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAvailabilityConfigList>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviderAvailableSlotsForOrganisation'.
  func makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when invoking 'getAutoFillMedicines'.
  func makeGetAutoFillMedicinesInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAutofillMedicineListMessage>]

  /// - Returns: Interceptors to use when invoking 'setAutoFillMedicines'.
  func makeSetAutoFillMedicinesInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderMedicineMessageList, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProviders'.
  func makeGetServiceProvidersInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceProvidersOfOrganisation'.
  func makeGetServiceProvidersOfOrganisationInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when invoking 'getAllSpecialties'.
  func makeGetAllSpecialtiesInterceptors() -> [ClientInterceptor<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>]

  /// - Returns: Interceptors to use when invoking 'getConfigurableEntryFields'.
  func makeGetConfigurableEntryFieldsInterceptors() -> [ClientInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderConfigurableEntryFieldsMessage>]
}

internal final class Nd_V1_ServiceProviderWorkerV1Client: Nd_V1_ServiceProviderWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Nd_V1_ServiceProviderServiceRequestWorkerV1Client`, then call methods of this protocol to make API calls.
internal protocol Nd_V1_ServiceProviderServiceRequestWorkerV1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nd_V1_ServiceProviderServiceRequestWorkerV1ClientInterceptorFactoryProtocol? { get }

  func setServiceRequest(
    _ request: Nd_V1_ServiceProviderServiceRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestMessage, Nd_V1_IdMessage>

  func getServiceRequest(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderServiceRequestMessage>
}

extension Nd_V1_ServiceProviderServiceRequestWorkerV1ClientProtocol {
  internal var serviceName: String {
    return "nd.v1.ServiceProviderServiceRequestWorkerV1"
  }

  /// Unary call to SetServiceRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to SetServiceRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setServiceRequest(
    _ request: Nd_V1_ServiceProviderServiceRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestMessage, Nd_V1_IdMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderServiceRequestWorkerV1/SetServiceRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetServiceRequestInterceptors() ?? []
    )
  }

  /// Unary call to GetServiceRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServiceRequest(
    _ request: Nd_V1_ServiceProviderServiceRequestRequestMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderServiceRequestMessage> {
    return self.makeUnaryCall(
      path: "/nd.v1.ServiceProviderServiceRequestWorkerV1/GetServiceRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceRequestInterceptors() ?? []
    )
  }
}

internal protocol Nd_V1_ServiceProviderServiceRequestWorkerV1ClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setServiceRequest'.
  func makeSetServiceRequestInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderServiceRequestMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when invoking 'getServiceRequest'.
  func makeGetServiceRequestInterceptors() -> [ClientInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderServiceRequestMessage>]
}

internal final class Nd_V1_ServiceProviderServiceRequestWorkerV1Client: Nd_V1_ServiceProviderServiceRequestWorkerV1ClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nd_V1_ServiceProviderServiceRequestWorkerV1ClientInterceptorFactoryProtocol?

  /// Creates a client for the nd.v1.ServiceProviderServiceRequestWorkerV1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nd_V1_ServiceProviderServiceRequestWorkerV1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_LoggingWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_LoggingWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setLog(request: Nd_V1_VoidMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_BoolMessage>
}

extension Nd_V1_LoggingWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.LoggingWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetLog":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_VoidMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_BoolMessage>(),
        interceptors: self.interceptors?.makeSetLogInterceptors() ?? [],
        userFunction: self.setLog(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_LoggingWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setLog'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetLogInterceptors() -> [ServerInterceptor<Nd_V1_VoidMessage, Nd_V1_BoolMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_NotificationWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_NotificationWorkerV1ServerInterceptorFactoryProtocol? { get }

  func sendNotification(request: Nd_V1_NotificationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_BoolMessage>
}

extension Nd_V1_NotificationWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.NotificationWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendNotification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_NotificationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_BoolMessage>(),
        interceptors: self.interceptors?.makeSendNotificationInterceptors() ?? [],
        userFunction: self.sendNotification(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_NotificationWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sendNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendNotificationInterceptors() -> [ServerInterceptor<Nd_V1_NotificationRequestMessage, Nd_V1_BoolMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_TwilioWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_TwilioWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getTwilioVideoAuthToken(request: Nd_V1_TwilioAuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>

  func getTwilioChatAuthToken(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>
}

extension Nd_V1_TwilioWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.TwilioWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetTwilioVideoAuthToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_TwilioAuthRequest>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeGetTwilioVideoAuthTokenInterceptors() ?? [],
        userFunction: self.getTwilioVideoAuthToken(request:context:)
      )

    case "GetTwilioChatAuthToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeGetTwilioChatAuthTokenInterceptors() ?? [],
        userFunction: self.getTwilioChatAuthToken(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_TwilioWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getTwilioVideoAuthToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTwilioVideoAuthTokenInterceptors() -> [ServerInterceptor<Nd_V1_TwilioAuthRequest, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when handling 'getTwilioChatAuthToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTwilioChatAuthTokenInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_UserTypeWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_UserTypeWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getUserType(request: Nd_V1_VoidMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>
}

extension Nd_V1_UserTypeWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.UserTypeWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserType":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_VoidMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeGetUserTypeInterceptors() ?? [],
        userFunction: self.getUserType(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_UserTypeWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getUserType'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserTypeInterceptors() -> [ServerInterceptor<Nd_V1_VoidMessage, Nd_V1_StringMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerAppointmentWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerAppointmentWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setAppointment(request: Nd_V1_CustomerAppointmentMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getAppointment(request: Nd_V1_CustomerAppointmentRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerAppointmentMessage>

  func getAppointments(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerAppointmentList>

  func getAppointmentPayments(request: Nd_V1_CustomerAppointmentRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerPaymentListMessage>

  func setNewPayment(request: Nd_V1_CustomerPaymentInfoMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>
}

extension Nd_V1_CustomerAppointmentWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerAppointmentWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetAppointment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerAppointmentMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetAppointmentInterceptors() ?? [],
        userFunction: self.setAppointment(request:context:)
      )

    case "GetAppointment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerAppointmentRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerAppointmentMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentInterceptors() ?? [],
        userFunction: self.getAppointment(request:context:)
      )

    case "GetAppointments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerAppointmentList>(),
        interceptors: self.interceptors?.makeGetAppointmentsInterceptors() ?? [],
        userFunction: self.getAppointments(request:context:)
      )

    case "GetAppointmentPayments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerAppointmentRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerPaymentListMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentPaymentsInterceptors() ?? [],
        userFunction: self.getAppointmentPayments(request:context:)
      )

    case "SetNewPayment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerPaymentInfoMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetNewPaymentInterceptors() ?? [],
        userFunction: self.setNewPayment(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerAppointmentWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setAppointment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAppointmentInterceptors() -> [ServerInterceptor<Nd_V1_CustomerAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentInterceptors() -> [ServerInterceptor<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerAppointmentMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerAppointmentList>]

  /// - Returns: Interceptors to use when handling 'getAppointmentPayments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentPaymentsInterceptors() -> [ServerInterceptor<Nd_V1_CustomerAppointmentRequestMessage, Nd_V1_CustomerPaymentListMessage>]

  /// - Returns: Interceptors to use when handling 'setNewPayment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetNewPaymentInterceptors() -> [ServerInterceptor<Nd_V1_CustomerPaymentInfoMessage, Nd_V1_IdMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setCustomerProfile(request: Nd_V1_CustomerCustomerProfileMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getCustomerProfile(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerCustomerProfileMessage>

  func getLatestFollowUpWithServiceProvider(request: Nd_V1_CustomerFollowUpRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerFollowUpMessage>

  func setChildProfile(request: Nd_V1_CustomerChildProfileUploadMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getTrustScore(request: Nd_V1_CustomerTrustScoreRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IntMessage>
}

extension Nd_V1_CustomerWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetCustomerProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerCustomerProfileMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetCustomerProfileInterceptors() ?? [],
        userFunction: self.setCustomerProfile(request:context:)
      )

    case "GetCustomerProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerCustomerProfileMessage>(),
        interceptors: self.interceptors?.makeGetCustomerProfileInterceptors() ?? [],
        userFunction: self.getCustomerProfile(request:context:)
      )

    case "GetLatestFollowUpWithServiceProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerFollowUpRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerFollowUpMessage>(),
        interceptors: self.interceptors?.makeGetLatestFollowUpWithServiceProviderInterceptors() ?? [],
        userFunction: self.getLatestFollowUpWithServiceProvider(request:context:)
      )

    case "SetChildProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerChildProfileUploadMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetChildProfileInterceptors() ?? [],
        userFunction: self.setChildProfile(request:context:)
      )

    case "GetTrustScore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerTrustScoreRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IntMessage>(),
        interceptors: self.interceptors?.makeGetTrustScoreInterceptors() ?? [],
        userFunction: self.getTrustScore(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setCustomerProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCustomerProfileInterceptors() -> [ServerInterceptor<Nd_V1_CustomerCustomerProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getCustomerProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerProfileInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerCustomerProfileMessage>]

  /// - Returns: Interceptors to use when handling 'getLatestFollowUpWithServiceProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLatestFollowUpWithServiceProviderInterceptors() -> [ServerInterceptor<Nd_V1_CustomerFollowUpRequestMessage, Nd_V1_CustomerFollowUpMessage>]

  /// - Returns: Interceptors to use when handling 'setChildProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetChildProfileInterceptors() -> [ServerInterceptor<Nd_V1_CustomerChildProfileUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getTrustScore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTrustScoreInterceptors() -> [ServerInterceptor<Nd_V1_CustomerTrustScoreRequestMessage, Nd_V1_IntMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerOrganisationWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerOrganisationWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setOrganisation(request: Nd_V1_CustomerOrganisationMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getOrganisation(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerOrganisationMessage>

  func getOrganisations(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerOrganisationListMessage>

  func getSpecificOrganisations(request: Nd_V1_StringArrayMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerOrganisationListMessage>
}

extension Nd_V1_CustomerOrganisationWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerOrganisationWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerOrganisationMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetOrganisationInterceptors() ?? [],
        userFunction: self.setOrganisation(request:context:)
      )

    case "GetOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerOrganisationMessage>(),
        interceptors: self.interceptors?.makeGetOrganisationInterceptors() ?? [],
        userFunction: self.getOrganisation(request:context:)
      )

    case "GetOrganisations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerOrganisationListMessage>(),
        interceptors: self.interceptors?.makeGetOrganisationsInterceptors() ?? [],
        userFunction: self.getOrganisations(request:context:)
      )

    case "GetSpecificOrganisations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_StringArrayMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerOrganisationListMessage>(),
        interceptors: self.interceptors?.makeGetSpecificOrganisationsInterceptors() ?? [],
        userFunction: self.getSpecificOrganisations(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerOrganisationWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_CustomerOrganisationMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationMessage>]

  /// - Returns: Interceptors to use when handling 'getOrganisations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerOrganisationListMessage>]

  /// - Returns: Interceptors to use when handling 'getSpecificOrganisations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSpecificOrganisationsInterceptors() -> [ServerInterceptor<Nd_V1_StringArrayMessage, Nd_V1_CustomerOrganisationListMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerPrescriptionWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerPrescriptionWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getPrescription(request: Nd_V1_CustomerServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerPrescriptionMessage>

  func downloadPrescriptionMedia(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>

  func getPrescriptionPdf(request: Nd_V1_RequestPdf, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ResponsePdf>
}

extension Nd_V1_CustomerPrescriptionWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerPrescriptionWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPrescription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerPrescriptionMessage>(),
        interceptors: self.interceptors?.makeGetPrescriptionInterceptors() ?? [],
        userFunction: self.getPrescription(request:context:)
      )

    case "DownloadPrescriptionMedia":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeDownloadPrescriptionMediaInterceptors() ?? [],
        userFunction: self.downloadPrescriptionMedia(request:context:)
      )

    case "GetPrescriptionPdf":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_RequestPdf>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ResponsePdf>(),
        interceptors: self.interceptors?.makeGetPrescriptionPdfInterceptors() ?? [],
        userFunction: self.getPrescriptionPdf(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerPrescriptionWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getPrescription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrescriptionInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerPrescriptionMessage>]

  /// - Returns: Interceptors to use when handling 'downloadPrescriptionMedia'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadPrescriptionMediaInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when handling 'getPrescriptionPdf'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrescriptionPdfInterceptors() -> [ServerInterceptor<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerReportWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerReportWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getReports(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerReportListMessage>

  func getAppointmentReports(request: Nd_V1_CustomerServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerReportListMessage>

  func setReport(request: Nd_V1_CustomerReportUploadMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func downloadReportMedia(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>
}

extension Nd_V1_CustomerReportWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerReportWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetReports":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerReportListMessage>(),
        interceptors: self.interceptors?.makeGetReportsInterceptors() ?? [],
        userFunction: self.getReports(request:context:)
      )

    case "GetAppointmentReports":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerReportListMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentReportsInterceptors() ?? [],
        userFunction: self.getAppointmentReports(request:context:)
      )

    case "SetReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerReportUploadMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetReportInterceptors() ?? [],
        userFunction: self.setReport(request:context:)
      )

    case "DownloadReportMedia":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeDownloadReportMediaInterceptors() ?? [],
        userFunction: self.downloadReportMedia(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerReportWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getReports'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetReportsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerReportListMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointmentReports'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentReportsInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerReportListMessage>]

  /// - Returns: Interceptors to use when handling 'setReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetReportInterceptors() -> [ServerInterceptor<Nd_V1_CustomerReportUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'downloadReportMedia'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadReportMediaInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerServiceProviderWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerServiceProviderWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getServiceProviderProfile(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomersServiceProviderProfileMessage>

  func getServiceProviders(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomersServiceProviderProfileListMessage>

  func getServiceProvidersOfOrganisation(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomersServiceProviderProfileListMessage>

  func getServiceProviderAvailablity(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerAvailabilityConfigList>

  func getServiceProviderAvailableSlots(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerGeneratedSlotListMessage>

  func getServiceProviderAvailablityForOrganisation(request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerAvailabilityConfigList>

  func getServiceProviderAvailableSlotsForOrganisation(request: Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerGeneratedSlotListMessage>

  func getAllSpecialties(request: Nd_V1_VoidMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CategoryListMessage>
}

extension Nd_V1_CustomerServiceProviderWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerServiceProviderWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetServiceProviderProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomersServiceProviderProfileMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderProfileInterceptors() ?? [],
        userFunction: self.getServiceProviderProfile(request:context:)
      )

    case "GetServiceProviders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomersServiceProviderProfileListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProvidersInterceptors() ?? [],
        userFunction: self.getServiceProviders(request:context:)
      )

    case "GetServiceProvidersOfOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomersServiceProviderProfileListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProvidersOfOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProvidersOfOrganisation(request:context:)
      )

    case "GetServiceProviderAvailablity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerAvailabilityConfigList>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailablityInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailablity(request:context:)
      )

    case "GetServiceProviderAvailableSlots":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerGeneratedSlotListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailableSlots(request:context:)
      )

    case "GetServiceProviderAvailablityForOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerAvailabilityConfigList>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailablityForOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailablityForOrganisation(request:context:)
      )

    case "GetServiceProviderAvailableSlotsForOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerGeneratedSlotListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailableSlotsForOrganisation(request:context:)
      )

    case "GetAllSpecialties":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_VoidMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CategoryListMessage>(),
        interceptors: self.interceptors?.makeGetAllSpecialtiesInterceptors() ?? [],
        userFunction: self.getAllSpecialties(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerServiceProviderWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getServiceProviderProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderProfileInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProvidersInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProvidersOfOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProvidersOfOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomersServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailablity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailablityInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerAvailabilityConfigList>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailableSlots'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailableSlotsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_CustomerGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailablityForOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailablityForOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerAvailabilityConfigList>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailableSlotsForOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceProviderInOrganisationRequestMessage, Nd_V1_CustomerGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when handling 'getAllSpecialties'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllSpecialtiesInterceptors() -> [ServerInterceptor<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_CustomerServiceRequestWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_CustomerServiceRequestWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setServiceRequest(request: Nd_V1_CustomerServiceRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getServiceRequest(request: Nd_V1_CustomerServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CustomerServiceRequestMessage>
}

extension Nd_V1_CustomerServiceRequestWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.CustomerServiceRequestWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetServiceRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetServiceRequestInterceptors() ?? [],
        userFunction: self.setServiceRequest(request:context:)
      )

    case "GetServiceRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_CustomerServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CustomerServiceRequestMessage>(),
        interceptors: self.interceptors?.makeGetServiceRequestInterceptors() ?? [],
        userFunction: self.getServiceRequest(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_CustomerServiceRequestWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setServiceRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetServiceRequestInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceRequestMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceRequestInterceptors() -> [ServerInterceptor<Nd_V1_CustomerServiceRequestRequestMessage, Nd_V1_CustomerServiceRequestMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderAppointmentWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderAppointmentWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setAppointment(request: Nd_V1_ServiceProviderAppointmentMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func transferAppointment(request: Nd_V1_ServiceProviderAppointmentMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getAppointment(request: Nd_V1_ServiceProviderAppointmentRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentMessage>

  func getAppointments(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentList>

  func getOrganisationAppointmentsofServiceProvider(request: Nd_V1_ServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentList>

  func getOrganisationAppointments(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentList>

  func getCustomerAppointments(request: Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentList>

  func getAppointmentPayments(request: Nd_V1_ServiceProviderAppointmentRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderPaymentListMessage>

  func getPayments(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderPaymentListMessage>
}

extension Nd_V1_ServiceProviderAppointmentWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderAppointmentWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetAppointment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAppointmentMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetAppointmentInterceptors() ?? [],
        userFunction: self.setAppointment(request:context:)
      )

    case "TransferAppointment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAppointmentMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeTransferAppointmentInterceptors() ?? [],
        userFunction: self.transferAppointment(request:context:)
      )

    case "GetAppointment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAppointmentRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentInterceptors() ?? [],
        userFunction: self.getAppointment(request:context:)
      )

    case "GetAppointments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentList>(),
        interceptors: self.interceptors?.makeGetAppointmentsInterceptors() ?? [],
        userFunction: self.getAppointments(request:context:)
      )

    case "GetOrganisationAppointmentsofServiceProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentList>(),
        interceptors: self.interceptors?.makeGetOrganisationAppointmentsofServiceProviderInterceptors() ?? [],
        userFunction: self.getOrganisationAppointmentsofServiceProvider(request:context:)
      )

    case "GetOrganisationAppointments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentList>(),
        interceptors: self.interceptors?.makeGetOrganisationAppointmentsInterceptors() ?? [],
        userFunction: self.getOrganisationAppointments(request:context:)
      )

    case "GetCustomerAppointments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentList>(),
        interceptors: self.interceptors?.makeGetCustomerAppointmentsInterceptors() ?? [],
        userFunction: self.getCustomerAppointments(request:context:)
      )

    case "GetAppointmentPayments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAppointmentRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderPaymentListMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentPaymentsInterceptors() ?? [],
        userFunction: self.getAppointmentPayments(request:context:)
      )

    case "GetPayments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderPaymentListMessage>(),
        interceptors: self.interceptors?.makeGetPaymentsInterceptors() ?? [],
        userFunction: self.getPayments(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderAppointmentWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setAppointment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAppointmentInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'transferAppointment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferAppointmentInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAppointmentMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderAppointmentMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when handling 'getOrganisationAppointmentsofServiceProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationAppointmentsofServiceProviderInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when handling 'getOrganisationAppointments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationAppointmentsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when handling 'getCustomerAppointments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerAppointmentsInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderCustomerAppointmentsRequestMessage, Nd_V1_ServiceProviderAppointmentList>]

  /// - Returns: Interceptors to use when handling 'getAppointmentPayments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentPaymentsInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAppointmentRequestMessage, Nd_V1_ServiceProviderPaymentListMessage>]

  /// - Returns: Interceptors to use when handling 'getPayments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaymentsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderPaymentListMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderCustomerWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderCustomerWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setCustomerProfile(request: Nd_V1_ServiceProviderCustomerProfileMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getCustomerProfile(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderCustomerProfileMessage>

  func getCustomerProfileFromPhoneNumber(request: Nd_V1_StringMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderMyPatientsProfileMessage>

  func getCustomers(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderMyPatientsProfileMessageList>

  func getCustomerAppointmentSummary(request: Nd_V1_ServiceProviderAppointmentSummaryRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAppointmentSummaryListMessage>

  func getCustomersOfOrganisation(request: Nd_V1_ServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderMyPatientsProfileMessageList>

  func getCustomersOfServiceProviderInOrganisation(request: Nd_V1_ServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderMyPatientsProfileMessageList>
}

extension Nd_V1_ServiceProviderCustomerWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderCustomerWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetCustomerProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderCustomerProfileMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetCustomerProfileInterceptors() ?? [],
        userFunction: self.setCustomerProfile(request:context:)
      )

    case "GetCustomerProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderCustomerProfileMessage>(),
        interceptors: self.interceptors?.makeGetCustomerProfileInterceptors() ?? [],
        userFunction: self.getCustomerProfile(request:context:)
      )

    case "GetCustomerProfileFromPhoneNumber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_StringMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderMyPatientsProfileMessage>(),
        interceptors: self.interceptors?.makeGetCustomerProfileFromPhoneNumberInterceptors() ?? [],
        userFunction: self.getCustomerProfileFromPhoneNumber(request:context:)
      )

    case "GetCustomers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderMyPatientsProfileMessageList>(),
        interceptors: self.interceptors?.makeGetCustomersInterceptors() ?? [],
        userFunction: self.getCustomers(request:context:)
      )

    case "GetCustomerAppointmentSummary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAppointmentSummaryRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAppointmentSummaryListMessage>(),
        interceptors: self.interceptors?.makeGetCustomerAppointmentSummaryInterceptors() ?? [],
        userFunction: self.getCustomerAppointmentSummary(request:context:)
      )

    case "GetCustomersOfOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderMyPatientsProfileMessageList>(),
        interceptors: self.interceptors?.makeGetCustomersOfOrganisationInterceptors() ?? [],
        userFunction: self.getCustomersOfOrganisation(request:context:)
      )

    case "GetCustomersOfServiceProviderInOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderMyPatientsProfileMessageList>(),
        interceptors: self.interceptors?.makeGetCustomersOfServiceProviderInOrganisationInterceptors() ?? [],
        userFunction: self.getCustomersOfServiceProviderInOrganisation(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderCustomerWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setCustomerProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCustomerProfileInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderCustomerProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getCustomerProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerProfileInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderCustomerProfileMessage>]

  /// - Returns: Interceptors to use when handling 'getCustomerProfileFromPhoneNumber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerProfileFromPhoneNumberInterceptors() -> [ServerInterceptor<Nd_V1_StringMessage, Nd_V1_ServiceProviderMyPatientsProfileMessage>]

  /// - Returns: Interceptors to use when handling 'getCustomers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomersInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]

  /// - Returns: Interceptors to use when handling 'getCustomerAppointmentSummary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerAppointmentSummaryInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAppointmentSummaryRequestMessage, Nd_V1_ServiceProviderAppointmentSummaryListMessage>]

  /// - Returns: Interceptors to use when handling 'getCustomersOfOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomersOfOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]

  /// - Returns: Interceptors to use when handling 'getCustomersOfServiceProviderInOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomersOfServiceProviderInOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderMyPatientsProfileMessageList>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderOrganisationWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderOrganisationWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setOrganisation(request: Nd_V1_ServiceProviderOrganisationMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getOrganisation(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderOrganisationMessage>

  func getOrganisations(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderOrganisationListMessage>

  func getSpecificOrganisations(request: Nd_V1_StringArrayMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderOrganisationListMessage>
}

extension Nd_V1_ServiceProviderOrganisationWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderOrganisationWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderOrganisationMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetOrganisationInterceptors() ?? [],
        userFunction: self.setOrganisation(request:context:)
      )

    case "GetOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderOrganisationMessage>(),
        interceptors: self.interceptors?.makeGetOrganisationInterceptors() ?? [],
        userFunction: self.getOrganisation(request:context:)
      )

    case "GetOrganisations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderOrganisationListMessage>(),
        interceptors: self.interceptors?.makeGetOrganisationsInterceptors() ?? [],
        userFunction: self.getOrganisations(request:context:)
      )

    case "GetSpecificOrganisations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_StringArrayMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderOrganisationListMessage>(),
        interceptors: self.interceptors?.makeGetSpecificOrganisationsInterceptors() ?? [],
        userFunction: self.getSpecificOrganisations(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderOrganisationWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderOrganisationMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationMessage>]

  /// - Returns: Interceptors to use when handling 'getOrganisations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganisationsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderOrganisationListMessage>]

  /// - Returns: Interceptors to use when handling 'getSpecificOrganisations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSpecificOrganisationsInterceptors() -> [ServerInterceptor<Nd_V1_StringArrayMessage, Nd_V1_ServiceProviderOrganisationListMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderPrescriptionWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderPrescriptionWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getPrescription(request: Nd_V1_ServiceProviderServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderPrescriptionMessage>

  func setPrescription(request: Nd_V1_ServiceProviderPrescriptionMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func downloadPrescriptionMedia(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>

  func getPrescriptionPdf(request: Nd_V1_RequestPdf, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ResponsePdf>
}

extension Nd_V1_ServiceProviderPrescriptionWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderPrescriptionWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPrescription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderPrescriptionMessage>(),
        interceptors: self.interceptors?.makeGetPrescriptionInterceptors() ?? [],
        userFunction: self.getPrescription(request:context:)
      )

    case "SetPrescription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderPrescriptionMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetPrescriptionInterceptors() ?? [],
        userFunction: self.setPrescription(request:context:)
      )

    case "DownloadPrescriptionMedia":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeDownloadPrescriptionMediaInterceptors() ?? [],
        userFunction: self.downloadPrescriptionMedia(request:context:)
      )

    case "GetPrescriptionPdf":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_RequestPdf>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ResponsePdf>(),
        interceptors: self.interceptors?.makeGetPrescriptionPdfInterceptors() ?? [],
        userFunction: self.getPrescriptionPdf(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderPrescriptionWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getPrescription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrescriptionInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderPrescriptionMessage>]

  /// - Returns: Interceptors to use when handling 'setPrescription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPrescriptionInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderPrescriptionMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'downloadPrescriptionMedia'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadPrescriptionMediaInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]

  /// - Returns: Interceptors to use when handling 'getPrescriptionPdf'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrescriptionPdfInterceptors() -> [ServerInterceptor<Nd_V1_RequestPdf, Nd_V1_ResponsePdf>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderReportWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderReportWorkerV1ServerInterceptorFactoryProtocol? { get }

  func getCustomerReports(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderReportListMessage>

  func getAppointmentReports(request: Nd_V1_ServiceProviderServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderReportListMessage>

  func setReport(request: Nd_V1_ServiceProviderReportUploadMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func downloadReportMedia(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_StringMessage>
}

extension Nd_V1_ServiceProviderReportWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderReportWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetCustomerReports":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderReportListMessage>(),
        interceptors: self.interceptors?.makeGetCustomerReportsInterceptors() ?? [],
        userFunction: self.getCustomerReports(request:context:)
      )

    case "GetAppointmentReports":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderReportListMessage>(),
        interceptors: self.interceptors?.makeGetAppointmentReportsInterceptors() ?? [],
        userFunction: self.getAppointmentReports(request:context:)
      )

    case "SetReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderReportUploadMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetReportInterceptors() ?? [],
        userFunction: self.setReport(request:context:)
      )

    case "DownloadReportMedia":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_StringMessage>(),
        interceptors: self.interceptors?.makeDownloadReportMediaInterceptors() ?? [],
        userFunction: self.downloadReportMedia(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderReportWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getCustomerReports'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCustomerReportsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderReportListMessage>]

  /// - Returns: Interceptors to use when handling 'getAppointmentReports'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppointmentReportsInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderReportListMessage>]

  /// - Returns: Interceptors to use when handling 'setReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetReportInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderReportUploadMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'downloadReportMedia'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadReportMediaInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_StringMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setServiceProviderProfile(request: Nd_V1_ServiceProviderProfileMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getServiceProviderProfile(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderProfileMessage>

  func setServiceProviderAvailability(request: Nd_V1_ServiceProviderAvailabilityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getServiceProviderAvailablity(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAvailabilityConfigList>

  func getServiceProviderAvailableSlots(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderGeneratedSlotListMessage>

  func getServiceProviderAvailablityForOrganisation(request: Nd_V1_ServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAvailabilityConfigList>

  func getServiceProviderAvailableSlotsForOrganisation(request: Nd_V1_ServiceProviderInOrganisationRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderGeneratedSlotListMessage>

  func getAutoFillMedicines(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderAutofillMedicineListMessage>

  func setAutoFillMedicines(request: Nd_V1_ServiceProviderMedicineMessageList, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getServiceProviders(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderProfileListMessage>

  func getServiceProvidersOfOrganisation(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderProfileListMessage>

  func getAllSpecialties(request: Nd_V1_VoidMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_CategoryListMessage>

  func getConfigurableEntryFields(request: Nd_V1_IdMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderConfigurableEntryFieldsMessage>
}

extension Nd_V1_ServiceProviderWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetServiceProviderProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderProfileMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetServiceProviderProfileInterceptors() ?? [],
        userFunction: self.setServiceProviderProfile(request:context:)
      )

    case "GetServiceProviderProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderProfileMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderProfileInterceptors() ?? [],
        userFunction: self.getServiceProviderProfile(request:context:)
      )

    case "SetServiceProviderAvailability":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderAvailabilityRequest>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetServiceProviderAvailabilityInterceptors() ?? [],
        userFunction: self.setServiceProviderAvailability(request:context:)
      )

    case "GetServiceProviderAvailablity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAvailabilityConfigList>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailablityInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailablity(request:context:)
      )

    case "GetServiceProviderAvailableSlots":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderGeneratedSlotListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailableSlots(request:context:)
      )

    case "GetServiceProviderAvailablityForOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAvailabilityConfigList>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailablityForOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailablityForOrganisation(request:context:)
      )

    case "GetServiceProviderAvailableSlotsForOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderInOrganisationRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderGeneratedSlotListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProviderAvailableSlotsForOrganisation(request:context:)
      )

    case "GetAutoFillMedicines":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderAutofillMedicineListMessage>(),
        interceptors: self.interceptors?.makeGetAutoFillMedicinesInterceptors() ?? [],
        userFunction: self.getAutoFillMedicines(request:context:)
      )

    case "SetAutoFillMedicines":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderMedicineMessageList>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetAutoFillMedicinesInterceptors() ?? [],
        userFunction: self.setAutoFillMedicines(request:context:)
      )

    case "GetServiceProviders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderProfileListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProvidersInterceptors() ?? [],
        userFunction: self.getServiceProviders(request:context:)
      )

    case "GetServiceProvidersOfOrganisation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderProfileListMessage>(),
        interceptors: self.interceptors?.makeGetServiceProvidersOfOrganisationInterceptors() ?? [],
        userFunction: self.getServiceProvidersOfOrganisation(request:context:)
      )

    case "GetAllSpecialties":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_VoidMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_CategoryListMessage>(),
        interceptors: self.interceptors?.makeGetAllSpecialtiesInterceptors() ?? [],
        userFunction: self.getAllSpecialties(request:context:)
      )

    case "GetConfigurableEntryFields":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_IdMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderConfigurableEntryFieldsMessage>(),
        interceptors: self.interceptors?.makeGetConfigurableEntryFieldsInterceptors() ?? [],
        userFunction: self.getConfigurableEntryFields(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setServiceProviderProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetServiceProviderProfileInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderProfileMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderProfileInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileMessage>]

  /// - Returns: Interceptors to use when handling 'setServiceProviderAvailability'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetServiceProviderAvailabilityInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderAvailabilityRequest, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailablity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailablityInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAvailabilityConfigList>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailableSlots'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailableSlotsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailablityForOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailablityForOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderAvailabilityConfigList>]

  /// - Returns: Interceptors to use when handling 'getServiceProviderAvailableSlotsForOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProviderAvailableSlotsForOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderInOrganisationRequestMessage, Nd_V1_ServiceProviderGeneratedSlotListMessage>]

  /// - Returns: Interceptors to use when handling 'getAutoFillMedicines'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAutoFillMedicinesInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderAutofillMedicineListMessage>]

  /// - Returns: Interceptors to use when handling 'setAutoFillMedicines'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAutoFillMedicinesInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderMedicineMessageList, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProviders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProvidersInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceProvidersOfOrganisation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceProvidersOfOrganisationInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderProfileListMessage>]

  /// - Returns: Interceptors to use when handling 'getAllSpecialties'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllSpecialtiesInterceptors() -> [ServerInterceptor<Nd_V1_VoidMessage, Nd_V1_CategoryListMessage>]

  /// - Returns: Interceptors to use when handling 'getConfigurableEntryFields'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetConfigurableEntryFieldsInterceptors() -> [ServerInterceptor<Nd_V1_IdMessage, Nd_V1_ServiceProviderConfigurableEntryFieldsMessage>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nd_V1_ServiceProviderServiceRequestWorkerV1Provider: CallHandlerProvider {
  var interceptors: Nd_V1_ServiceProviderServiceRequestWorkerV1ServerInterceptorFactoryProtocol? { get }

  func setServiceRequest(request: Nd_V1_ServiceProviderServiceRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_IdMessage>

  func getServiceRequest(request: Nd_V1_ServiceProviderServiceRequestRequestMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Nd_V1_ServiceProviderServiceRequestMessage>
}

extension Nd_V1_ServiceProviderServiceRequestWorkerV1Provider {
  internal var serviceName: Substring { return "nd.v1.ServiceProviderServiceRequestWorkerV1" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetServiceRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderServiceRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_IdMessage>(),
        interceptors: self.interceptors?.makeSetServiceRequestInterceptors() ?? [],
        userFunction: self.setServiceRequest(request:context:)
      )

    case "GetServiceRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Nd_V1_ServiceProviderServiceRequestRequestMessage>(),
        responseSerializer: ProtobufSerializer<Nd_V1_ServiceProviderServiceRequestMessage>(),
        interceptors: self.interceptors?.makeGetServiceRequestInterceptors() ?? [],
        userFunction: self.getServiceRequest(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Nd_V1_ServiceProviderServiceRequestWorkerV1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setServiceRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetServiceRequestInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderServiceRequestMessage, Nd_V1_IdMessage>]

  /// - Returns: Interceptors to use when handling 'getServiceRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceRequestInterceptors() -> [ServerInterceptor<Nd_V1_ServiceProviderServiceRequestRequestMessage, Nd_V1_ServiceProviderServiceRequestMessage>]
}
